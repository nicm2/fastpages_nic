{
  
    
        "post0": {
            "title": "Unit 5 HW 2019 FRQ 2",
            "content": "Step Tracker Class . Code . Prompt- StepTracker, object with a parameter that defines the minimum steps to be active . Required methods- addDailySteps activeDays averageSteps . public class StepTracker { private int days; private int activeDays; private int totalSteps; private int minActive; public StepTracker(int m) { minActive = m; days = 0; activeDays = 0; totalSteps = 0; } public int activeDays() { return activeDays; } public double averageSteps() { if (days == 0) { return 0.0; } return (double) totalSteps / days; } public void addDailySteps(int steps) { days++; totalSteps += steps; if (steps &gt;= minActive) { activeDays++; } } } . Instance Variables: keep track of how many total days we’ve recorded, how many total steps have been taken, and how many days are considered “active&quot;. . private int days; private int activeDays; private int totalSteps; private int minActive; . Explicit sets the variables to 0 . public StepTracker(int m) { minActive = m; days = 0; activeDays = 0; totalSteps = 0; } . active days method: accessor method . public int activeDays() { return activeDays; } . average steps method: returns the average number of steps per day . public double averageSteps() { if (days == 0) { return 0.0; } return (double) totalSteps / days; } . method to record number of steps per day . increments number of days | increments total steps by steps | if steps is greater than minActive increment days active | . public void addDailySteps(int steps) { days++; totalSteps += steps; if (steps &gt;= minActive) { activeDays++; } } .",
            "url": "https://nicm2.github.io/fastpages_nic/fastpages/2022/10/23/Unit5.html",
            "relUrl": "/fastpages/2022/10/23/Unit5.html",
            "date": " • Oct 23, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Unit 3 HW",
            "content": "2019 FRQ 1 . Question 1: . The APCalendar class contains methods used to calculate information about a calendar. You will write two methods of the class . public class APCalendar { /** Returns true if year is a leap year and false otherwise. */ private static boolean isLeapYear(int year) { /* implementation not shown */ } /** Returns the number of leap years between year1 and year2, inclusive. * Precondition: 0 &lt;= year1 &lt;= year2 */ public static int numberOfLeapYears(int year1, int year2) { /* to be implemented in part (a) */ } /** Returns the value representing the day of the week for the first day of year, * where 0 denotes Sunday, 1 denotes Monday, ..., and 6 denotes Saturday. */ private static int firstDayOfYear(int year) { /* implementation not shown */ } /** Returns n, where month, day, and year specify the nth day of the year. * Returns 1 for January 1 (month = 1, day = 1) of any year. * Precondition: The date represented by month, day, year is a valid date. */ private static int dayOfYear(int month, int day, int year) { /* implementation not shown */ } /** Returns the value representing the day of the week for the given date * (month, day, year), where 0 denotes Sunday, 1 denotes Monday, ..., * and 6 denotes Saturday. * Precondition: The date represented by month, day, year is a valid date. */ public static int dayOfWeek(int month, int day, int year) { /* to be implemented in part (b) */ } // There may be instance variables, constructors, and other methods not shown. } . (a) Write the static method numberOfLeapYears, which returns the number of leap years between year1 and year2, inclusive. In order to calculate this value, a helper method is provided for you. . isLeapYear(year) returns true if year is a leap year and false otherwise. . Complete method numberOfLeapYears below. You must use isLeapYear appropriately to receive full credit. . /** Returns the number of leap years between year1 and year2, inclusive. * Precondition: 0 &lt;= year1 &lt;= year2 */ public static int numberOfLeapYears(int year1, int year2) . Q1 a) Answer: . Given Info: the parameters year1 and year 2, the isLeapYear(year) method . Return Type: return type of numberOfLeapYears is int and I have to calculate the number of leap years between 2 years and return it. . public static int numberOfLeapYears(int year1, int year2) { int count = 0; for (int y = year1; y &lt;= year2; y++) { if (isLeapYear(y)){ count++; } } return count; } . import java.util.Calendar; import java.util.GregorianCalendar; public class APCalendar { /** Returns the number of leap years between year1 and year2, inclusive. * Precondition: 0 &lt;= year1 &lt;= year2 */ public static int numberOfLeapYears(int year1, int year2) { int count = 0; for (int y = year1; y &lt;= year2; y++) { if (isLeapYear(y)){ count++; } } return count; } /** Returns true if year is a leap year and false otherwise. */ private static boolean isLeapYear(int year) { return new GregorianCalendar().isLeapYear(year); } public static void main(String[] args) { int answer = APCalendar.numberOfLeapYears(2000, 2050); System.out.println(&quot;Your answer should be 13: &quot; + answer); } } . FRQ 1 Question b) . Write the static method dayOfWeek, which returns the integer value representing the day of the week for the given date (month, day, year), where 0 denotes Sunday, 1 denotes Monday, ..., and 6 denotes Saturday. For example, 2019 began on a Tuesday, and January 5 is the fifth day of 2019. As a result, January 5, 2019, fell on a Saturday, and the method call dayOfWeek(1, 5, 2019) returns 6. As another example, January 10 is the tenth day of 2019. As a result, January 10, 2019, fell on a Thursday, and the method call dayOfWeek(1, 10, 2019) returns 4. In order to calculate this value, two helper methods are provided for you . firstDayOfYear(year) returns the integer value representing the day of the week for the first day of year, where 0 denotes Sunday, 1 denotes Monday, …, and 6 denotes Saturday. For example, since 2019 began on a Tuesday, firstDayOfYear(2019) returns 2. . dayOfYear(month, day, year) returns n, where month, day, and year specify the nth day of the year. For the first day of the year, January 1 (month = 1, day = 1), the value 1 is returned. This method accounts for whether year is a leap year. For example, dayOfYear(3, 1, 2017) returns 60, since 2017 is not a leap year, while dayOfYear(3, 1, 2016) returns 61, since 2016 is a leap year. . Complete method dayOfWeek below. You must use firstDayOfYear and dayOfYear appropriately to receive full credit. . /** Returns the value representing the day of the week for the given date * (month, day, year), where 0 denotes Sunday, 1 denotes Monday, ..., * and 6 denotes Saturday. * Precondition: The date represented by month, day, year is a valid date. */ public static int dayOfWeek(int month, int day, int year) . Q1 Answer b) . public static int dayOfWeek(int month, int day, int year){ public static int dayOfWeek(int month, int day, int year) { firstDay = firstDayOfYear(year); // store the day of the week of the first day dayAfter = dayOfYear(month, day, year); // store the number of days since new year (inclusive) return (firstDay + dayAfter - 1) % 7; // adds the day of the week to the days since new year, but minus 1 because the dayAfterNew includes the first day. then, mod 7 } . import java.util.Calendar; import java.util.GregorianCalendar; public class APCalendar { /** Returns the value representing the day of the week for the given date * (month, day, year), where 0 denotes Sunday, 1 denotes Monday, ..., * and 6 denotes Saturday. * Precondition: The date represented by month, day, year is a valid date. */ public static int dayOfWeek(int month, int day, int year){ public static int dayOfWeek(int month, int day, int year) { firstDay = firstDayOfYear(year); // store the day of the week of the first day dayAfter = dayOfYear(month, day, year); // store the number of days since new year (inclusive) return (firstDay + dayAfter - 1) % 7; // adds the day of the week to the days since new year, but minus 1 because the dayAfterNew includes the first day. then, mod 7 } public static void main(String[] args) { int answer = APCalendar.dayOfWeek(1, 8, 2019); System.out.println(&quot;Your answer should be 2: &quot; + answer); } /** Returns the value representing the day of the week for the first day of year, * where 0 denotes Sunday, 1 denotes Monday, ..., and 6 denotes Saturday. */ private static int firstDayOfYear(int year) { GregorianCalendar gc = new GregorianCalendar(year, Calendar.JANUARY, 1); return gc.get(Calendar.DAY_OF_WEEK) - 1; } /** Returns n, where month, day, and year specify the nth day of the year. * Returns 1 for January 1 (month = 1, day = 1) of any year. * Precondition: The date represented by month, day, year is a valid date. */ private static int dayOfYear(int month, int day, int year) { GregorianCalendar gc = new GregorianCalendar(year, month - 1, day); return gc.get(Calendar.DAY_OF_YEAR); } } . Conditionals Exercises . 2. . import java.util.Scanner; public class Exercise2 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.println(&quot;input a: &quot;); double a = input.nextDouble(); System.out.println(&quot;Input b: &quot;); double b = input.nextDouble(); System.out.println(&quot;Input c: &quot;); double c = input.nextDouble(); double discriminant = b * b - 4 * a * c; if (discriminant &gt; 0.0) { double root1 = (-b + Math.pow(discriminant, 0.5)/(2*a)); double root2 = (-b - Math.pow(discriminant, 0.5)/(2*a)); System.out.println(&quot;The roots are &quot; + root1 + &quot; and &quot; + root2); } else if (discriminant == 0) { double root = (-b/(2*a)); System.out.println(&quot;The root is &quot; + root); } else { System.out.println(&quot;no real roots&quot;); } } } Exercise2.main(null); . input a: Input b: Input c: no real roots . Write a Java program that reads a floating-point number and prints &quot;zero&quot; if the number is zero. Otherwise, print &quot;positive&quot; or &quot;negative&quot;. Add &quot;small&quot; if the absolute value of the number is less than 1, or &quot;large&quot; if it exceeds 1,000,000. Go to the editor | public class Exercise4 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(&quot;enter number: &quot;); double number = input.nextDouble(); System.out.println(number); if (number &gt; 0) { System.out.println(&quot;positive&quot;); } else if (number == 0) { System.out.println(&quot;zero&quot;); } else { System.out.println(&quot;negative&quot;); } if (number &lt; 1) { System.out.println(&quot;negative&quot;); } else if (number &gt; 1000000) { System.out.println(&quot;large&quot;); } } } Exercise4.main(null); . enter number: 3.0 positive . Write a Java program that reads in two floating-point numbers and tests whether they are the same up to three decimal places. Go to the editor | public class Exercise6 { static double truncate(double n, int decimalPlace) { n = n*Math.pow(10, decimalPlace); n = Math.floor(n); n = n/Math.pow(10, decimalPlace); return n; } public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(&quot;enter number: &quot;); double number1 = input.nextDouble(); double num1Trun = truncate(number1, 3); System.out.println(number1); System.out.print(&quot;enter number: &quot;); double number2 = input.nextDouble(); double num2Trun = truncate(number2, 3); System.out.println(number2); if (num1Trun == num2Trun) { System.out.println(&quot;same&quot;); } else { System.out.println(&quot;diff&quot;); } input.close(); } } Exercise6.main(null); . enter number: 3.9287655 enter number: 3.9287688 same . Write a Java program that takes the user to provide a single character from the alphabet. Print Vowel or Consonant, depending on the user input. If the user input is not a letter (between a and z or A and Z), or is a string of length &gt; 1, print an error message. | import java.util.ArrayList; import java.util.Scanner; import java.util.Set; /** * Exercise6 */ public class Exercise8 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(&quot;enter letter: &quot;); String letter = input.nextLine(); System.out.println(letter); Set&lt;String&gt; vowels = Set.of(&quot;a&quot;, &quot;e&quot;, &quot;i&quot;, &quot;o&quot;, &quot;u&quot;, &quot;A&quot;, &quot;E&quot;, &quot;I&quot;, &quot;O&quot;, &quot;U&quot;); if(letter.length() &gt; 1) { System.out.println(&quot;not one letter&quot;); } else if (!letter.matches(&quot;[a-zA-Z]+&quot;)) { System.out.println(&quot;not a letter&quot;); } else if (vowels.contains(letter)) { System.out.println(&quot;vowel&quot;); } else { System.out.println(&quot;consonant&quot;); } input.close(); } } Exercise8.main(null); . enter letter: a vowel . Write a program in Java to display the first 10 natural numbers. | public class Exercise10 { public static void main(String[] args) { System.out.println(&quot;The first 10 natural numbers are:&quot;); for (int i = 1; i &lt;= 10; i++) { System.out.println(i); } } } Exercise10.main(null); . The first 10 natural numbers are: 1 2 3 4 5 6 7 8 9 10 . Write a program in Java to input 5 numbers from keyboard and find their sum and average. | import java.util.Scanner; import java.util.Set; /** * Exercise6 */ public class Exercise12 { public static void main(String[] args) { int sum = 0; double average; System.out.println(&quot;Input the 5 numbers&quot;); Scanner input = new Scanner(System.in); for (int i = 0; i &lt; 5; i++) { int num = input.nextInt(); System.out.println(num); sum += num; } input.close(); average = (double) sum/5; System.out.println(&quot;The sum of 5 no is: &quot; + sum); System.out.println(&quot;The avg of 5 no is: &quot; + average); } } Exercise12.main(null); . Input the 5 numbers 20 5 1 6 9 The sum of 5 no is: 41 The avg of 5 no is: 8.2 . Write a program in Java to display the multiplication table of a given integer. | public class Exercise14 { public static void main(String[] args) { System.out.println(&quot;Input the number: &quot;); Scanner input = new Scanner(System.in); int num = input.nextInt(); System.out.println(&quot;Input num of terms: &quot;); int termNum = input.nextInt(); for (int i = 0; i &lt;= termNum; i++) { System.out.println(num + &quot; X &quot; + i + &quot; = &quot; + num*i); } input.close(); } } Exercise14.main(null); . Input the number: Input num of terms: 8 X 0 = 0 8 X 1 = 8 8 X 2 = 16 8 X 3 = 24 8 X 4 = 32 8 X 5 = 40 . Write a program in Java to display the pattern like right angle triangle with a number. | public class Exercise16 { public static void main(String[] args) { System.out.print(&quot;Input num of rows: &quot;); Scanner input = new Scanner(System.in); int num = input.nextInt(); System.out.println(num); for (int i = 1; i &lt;= num; i++) { for (int j = 1; j &lt;= i; j++) { System.out.print(j); } System.out.println(); } } } Exercise16.main(null); . Input num of rows: 5 1 12 123 1234 12345 . Write a program in Java to make such a pattern like right angle triangle with number increased by 1. | public class Exercise18 { public static void main(String[] args) { System.out.print(&quot;Input num of rows: &quot;); Scanner input = new Scanner(System.in); int num = input.nextInt(); System.out.println(num); int numDisplay = 1; for (int i = 1; i &lt;= num; i++) { for (int j = 1; j &lt;= i; j++) { System.out.print(numDisplay + &quot; &quot;); numDisplay++; } System.out.println(); } } } Exercise18.main(null); . Input num of rows: 4 1 2 3 4 5 6 7 8 9 10 . Write a program in Java to print the Floyd&#39;s Triangle. | public class Exercise20 { public static void main(String[] args) { System.out.print(&quot;Input num of rows: &quot;); Scanner input = new Scanner(System.in); int num = input.nextInt(); System.out.println(num); int numDisplay = 1; for (int i = 1; i &lt;= num; i++) { for (int j = 1; j &lt;= i; j++) { System.out.print(numDisplay + &quot; &quot;); numDisplay++; } System.out.println(); } } } Exercise20.main(null); . Input num of rows: 6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 .",
            "url": "https://nicm2.github.io/fastpages_nic/fastpages/2022/10/22/unit3.html",
            "relUrl": "/fastpages/2022/10/22/unit3.html",
            "date": " • Oct 22, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Qualcomm Lecture Reflection (Session 2)",
            "content": "Qualcomm Reflection . I learned a lot from the Qualcomm lecture alot about the mindset and ideals that are important for making your way through a career, college, and having a succesfull future. The lecturers gave purpose behind processes like the use of Scrum Board as a way to free up mental bandwidth to innovate on whats already there. They explained that its important to question what your doing and be curious while learning. There is always room for improvement. The lecturers also described their path to their career which was very enlightening. One explained how they didn&#39;t know what they were going to do or major in but they were able to get involved in STEM and explore different career paths and she was able to identify what she enjoyed. She was intrested in the topic and found it fun. I can relate to her experience, as personally, I have no clue what I want to do in the future. I can see myself in a bunch of different feels. It was reassuring to see that I&#39;m not the only one and that you can explore different topics until you find one you are intrested in. She also explored computer science when she took a class in college and found it very fun and rewarding. She even explained how after her 4 years at college, she didn&#39;t feel mentally prepared to graduate and pursue a path in economics or cs so she was able to attend a masters program in computer science. It was intresting to show how flexible college is and how you are able to find what you want to pursue. She talked about a specific field, AI which sounded very intresting to me and promoted problem-solving and was also fun. She explained the importance of working with others either as a team for projects or being able to successful communicate with your teachers in office hours. You can&#39;t do it all on your own, you need people to help guide you to reach your goals. She also talked about the value of leadership roles and working outside of your comfort zone to capitalize on opportunities. This was one of my key takeaways as previously I haven&#39;t been super comfrotable reaching out and asking for help. I realize that the best way to learn is to be able to communicate and interact with others. Another key learning from the lecture was that when opportunities are thrown your way, just take it, believe in yourself! Don&#39;t just sit back and be a spectator. Your strength is your perspective and your ability to bounce back from sub-optimal decsions. Ill be most succesfull doing the things that make me happy, something that I believe in, something that I&#39;m passionate about. Accept the fact that your are going to fail at some point and that when you fail, you will learn and will bounce back. Overall, I learned about the mindset and values that make a successful engineer and successful future. . Tips for interviews: try to speak your mind and give your perspective, be okay with geting no&#39;s, feel comfortable where its less of an interview and more of a conversation by asking questions! .",
            "url": "https://nicm2.github.io/fastpages_nic/fastpages/2022/10/18/qualcomm-reflection.html",
            "relUrl": "/fastpages/2022/10/18/qualcomm-reflection.html",
            "date": " • Oct 18, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "College Board (Units 1-2) Blog",
            "content": "Unit 1 Primitives . Notes . Primitative Types include | Boolean (true/false), one bit | Int (integer values), 2-3 bits | Double (Decimal values) 64 bits | Short, Byte, Floats, Char | Operators include | /+ is addition | /- is subtraction | / is division | is modulus (remainder) | /* is multiplication | ++ ex ++x is x=x+1 | -- ex --x is x= x-1 | += ex x+=3 is x=x+3 | -=ex x-=3 is x=x-3 | Compound assignment operators (+=. -=) can be used in place of regular assignment operators | ++ and -- are increase and decrease operators | . public class CompOpsDemo { public static void main(String[] args) { int x = 6; x += 7; x -= 7; x *= 3; x /= 5; x %= 3; } } . Practice . import java.util.Scanner; public class testScoreApp { /** * @param args the command line arguments */ public static void main(String[] args) { // TODO code application logic here { // display operational messages System.out.println(&quot;Please enter test scores that range from 0 to 100.&quot;); System.out.println(&quot;To end the program enter 999.&quot;); System.out.println(); // print a blank line // initialize variables and create a Scanner object Scanner sc = new Scanner(System.in); String choice = &quot;y&quot;; // get a series of test scores from the user while (!choice.equalsIgnoreCase(&quot;n&quot;)) { int scoreTotal = 0; int scoreCount = 0; int testScore = 0; System.out.println(&quot;Enter the number of test score to be entered: &quot;); int numberOfTestScores = sc.nextInt(); for (int i = 1; i &lt;= numberOfTestScores; i++) { // get the input from the user System.out.print(&quot;Enter score &quot; + i + &quot;: &quot;); testScore = sc.nextInt(); // accumulate score count and score total if (testScore &lt;= 100) { scoreCount = scoreCount + 1; scoreTotal = scoreTotal + testScore; } else if (testScore &gt; 100) System.out.println(&quot;Invalid entry, not counted&quot;); } double averageScore = scoreTotal / scoreCount; String message = &quot; n&quot; + &quot;Score count: &quot; + scoreCount + &quot; n&quot; + &quot;Score total: &quot; + scoreTotal + &quot; n&quot; + &quot;Average score: &quot; + averageScore + &quot; n&quot;; System.out.println(message); System.out.println(); System.out.println(&quot;Enter more test scores? (y/n)&quot;); choice= sc.next(); } // display the score count, score total, and average score } } } . Unit 2 Objects . Notes . Object-oriented programming, refered to as OOP, is a programming paradigm that organizes software design around objects allowing data to operate and be bound together | Classes are a template from which objects are created. Objects created under the same class will share common methods and attributes. | Objects are instances of a class. | Methods, or functions, are a set of code that perform a specific task. | Ex: class vegetables would have objects carrot, tomato, etc. | Class attributes (which the objects will inherit) could be calorie count, quantity, or other values relevant to the class | Methods of the class would be actions relevant to the class like consume or save | Classes in Java can contain data members, methods, constructors, nested classes, and interfaces. | To initialize an object, you would use a class constructor | Defining and calling methods is advantageous because it allows for code reuse, optimization, and organization. | Calling a method: methodName(parameter1, parameter2); | Calling an object&#39;s method: objectReference.methodName(parameter1, parameter2); | . Examples . Painter myPainter = new Painter(); //Object initialized by calling a constructor public int max(int x, int y) // modifier, return-type, method=name, parameter-list { if (x&gt;y) return x; else return y; } methodName(parameter1, parameter2); //Calling a method objectReference.methodName(parameter1, parameter2); //Calling an object&#39;s method . Practice . Creating a class w/ a method . public class Science { // class created public void printTypes(){ // method System.out.println(&quot;Physics&quot;); System.out.println(&quot;Astrology&quot;); System.out.println(&quot;Chemistry&quot;); System.out.println(&quot;Biology&quot;); } public static void main(String[] args){ // main class that runs Science myObject = new Science(); // creating an object from class myObject.printTypes(); } } Science.main(null); . Physics Astrology Chemistry Biology . Inheriting a Class . public class ScienceTypes extends Science{ // extending class public ScienceTypes(){ // new class now has all the old class attributes } public static void main(String[] args){ // main class ScienceTypes mySecondObject = new ScienceTypes(); // creates an object from the new class mySecondObject.printTypes(); // reference methods and attributes from the inherited class } } ScienceTypes.main(null); . Physics Astrology Chemistry Biology .",
            "url": "https://nicm2.github.io/fastpages_nic/fastpages/2022/10/14/collegeboard.html",
            "relUrl": "/fastpages/2022/10/14/collegeboard.html",
            "date": " • Oct 14, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Lists and Array List",
            "content": "import java.util.ArrayList; import java.util.Comparator; public class ArrayListQuiz { public static void main(String[] args) { // Creating 2 arraylists ArrayList&lt;String&gt; Quiz = new ArrayList&lt;String&gt;(); // ArrayList&lt;String&gt; footballPlayers = new ArrayList&lt;String&gt;(); // Adding without index Quiz.add(&quot;What is the chemical symbol for gold?&quot;); Quiz.add(&quot;What is the 5th planet from the sun?&quot;); Quiz.add(&quot;What is the acceleration of gravity?&quot;); System.out.println(Quiz); // Adding players with index Quiz.add(0, &quot;What is the chemical symbol for helium?&quot;); Quiz.add(1, &quot;What is the 8th planet from the sun?&quot;); System.out.println(&quot;setting the questions at certain indexes: &quot; + &quot; n&quot; + Quiz + &quot; n&quot;); // Showing size of list System.out.println(&quot;Size of array list: &quot; + &quot; n&quot; + Quiz.size() + &quot; n&quot;); // Remove item with index Quiz.remove(2); System.out.println(&quot;removing the third question at index 2: &quot; + &quot; n&quot; + Quiz + &quot; n&quot;); // Remove an item Quiz.remove(&quot;What is the chemical symbol for helium?&quot;); System.out.println(&quot;removing the helium question: &quot; + &quot; n&quot; + Quiz + &quot; n&quot;); Quiz.add(&quot;What is the 8th planet from the sun?&quot;); // get an iteam with index System.out.println(&quot;Get element at index 1: &quot; + &quot; n&quot; + Quiz.get(1) + &quot; n&quot;); // find index of an item System.out.println(&quot;indexing the helium question: &quot; + &quot; n&quot; + Quiz.indexOf(&quot;What is the chemical symbol for helium?&quot;) + &quot; n&quot;); // hashcode of list System.out.println(&quot;Hash Code: &quot; + Quiz.hashCode() + &quot; n&quot;); // check if list is empty System.out.println(&quot;Is the arraylist empty: &quot; + Quiz.isEmpty() + &quot; n&quot;); // check if list contains an item System.out.println(&quot;Does arraylist contain What is the 8th planet from the sun?&quot; + Quiz.contains(&quot;What is the 8th planet from the sun?&quot;) + &quot; n&quot;); // clears list Quiz.clear(); System.out.println(&quot;Cleared arrayList:&quot; + &quot; n&quot; + Quiz); } } ArrayListQuiz.main(null); . [What is the chemical symbol for gold?, What is the 5th planet from the sun?, What is the acceleration of gravity?] setting the questions at certain indexes: [What is the chemical symbol for helium?, What is the 8th planet from the sun?, What is the chemical symbol for gold?, What is the 5th planet from the sun?, What is the acceleration of gravity?] Size of array list: 5 removing the third question at index 2: [What is the chemical symbol for helium?, What is the 8th planet from the sun?, What is the 5th planet from the sun?, What is the acceleration of gravity?] removing the helium question: [What is the 8th planet from the sun?, What is the 5th planet from the sun?, What is the acceleration of gravity?] Get element at index 1: What is the 5th planet from the sun? indexing the helium question: -1 Hash Code: -966479922 Is the arraylist empty: false Does arraylist contain What is the 8th planet from the sun?true Cleared arrayList: [] .",
            "url": "https://nicm2.github.io/fastpages_nic/fastpages/2022/10/09/arraylist.html",
            "relUrl": "/fastpages/2022/10/09/arraylist.html",
            "date": " • Oct 9, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Rapid API Java",
            "content": "Fetch and Backend Java Rapid API . API Raw Output . Uses and NFL Statistics API on rapidapi.com to output data on rushing-stats for each team including touchdowns and yards. Uses fetch to ouput the raw JSON data. . import java.net.URI; import java.net.http.HttpClient; import java.net.http.HttpRequest; import java.net.http.HttpResponse; HttpRequest request = HttpRequest.newBuilder() .uri(URI.create(&quot;https://nfl-team-stats.p.rapidapi.com/v1/nfl-stats/teams/rushing-stats/defense/2019&quot;)) .header(&quot;X-RapidAPI-Key&quot;, &quot;ec6e646230mshf820e393587eb36p16c0b2jsn78339512865b&quot;) .header(&quot;X-RapidAPI-Host&quot;, &quot;nfl-team-stats.p.rapidapi.com&quot;) .method(&quot;GET&quot;, HttpRequest.BodyPublishers.noBody()) .build(); HttpResponse&lt;String&gt; response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString()); System.out.println(response.body()); . {&#34;_embedded&#34;:{&#34;teamRushingStatsList&#34;:[{&#34;name&#34;:&#34;Ravens&#34;,&#34;yards&#34;:1494,&#34;touchdowns&#34;:12,&#34;_links&#34;:{&#34;rushing-stats&#34;:{&#34;href&#34;:&#34;http://nflteamstatsapi-env.eba-ri96jifs.us-east-1.elasticbeanstalk.com/v1/nfl-stats/teams/rushing-stats/defense/2019&#34;}}},{&#34;name&#34;:&#34;49ers&#34;,&#34;yards&#34;:1802,&#34;touchdowns&#34;:11,&#34;_links&#34;:{&#34;rushing-stats&#34;:{&#34;href&#34;:&#34;http://nflteamstatsapi-env.eba-ri96jifs.us-east-1.elasticbeanstalk.com/v1/nfl-stats/teams/rushing-stats/defense/2019&#34;}}},{&#34;name&#34;:&#34;Seahawks&#34;,&#34;yards&#34;:1883,&#34;touchdowns&#34;:22,&#34;_links&#34;:{&#34;rushing-stats&#34;:{&#34;href&#34;:&#34;http://nflteamstatsapi-env.eba-ri96jifs.us-east-1.elasticbeanstalk.com/v1/nfl-stats/teams/rushing-stats/defense/2019&#34;}}},{&#34;name&#34;:&#34;Vikings&#34;,&#34;yards&#34;:1728,&#34;touchdowns&#34;:8,&#34;_links&#34;:{&#34;rushing-stats&#34;:{&#34;href&#34;:&#34;http://nflteamstatsapi-env.eba-ri96jifs.us-east-1.elasticbeanstalk.com/v1/nfl-stats/teams/rushing-stats/defense/2019&#34;}}},{&#34;name&#34;:&#34;Colts&#34;,&#34;yards&#34;:1567,&#34;touchdowns&#34;:8,&#34;_links&#34;:{&#34;rushing-stats&#34;:{&#34;href&#34;:&#34;http://nflteamstatsapi-env.eba-ri96jifs.us-east-1.elasticbeanstalk.com/v1/nfl-stats/teams/rushing-stats/defense/2019&#34;}}},{&#34;name&#34;:&#34;Bills&#34;,&#34;yards&#34;:1649,&#34;touchdowns&#34;:12,&#34;_links&#34;:{&#34;rushing-stats&#34;:{&#34;href&#34;:&#34;http://nflteamstatsapi-env.eba-ri96jifs.us-east-1.elasticbeanstalk.com/v1/nfl-stats/teams/rushing-stats/defense/2019&#34;}}},{&#34;name&#34;:&#34;Eagles&#34;,&#34;yards&#34;:1442,&#34;touchdowns&#34;:13,&#34;_links&#34;:{&#34;rushing-stats&#34;:{&#34;href&#34;:&#34;http://nflteamstatsapi-env.eba-ri96jifs.us-east-1.elasticbeanstalk.com/v1/nfl-stats/teams/rushing-stats/defense/2019&#34;}}},{&#34;name&#34;:&#34;Cowboys&#34;,&#34;yards&#34;:1656,&#34;touchdowns&#34;:14,&#34;_links&#34;:{&#34;rushing-stats&#34;:{&#34;href&#34;:&#34;http://nflteamstatsapi-env.eba-ri96jifs.us-east-1.elasticbeanstalk.com/v1/nfl-stats/teams/rushing-stats/defense/2019&#34;}}},{&#34;name&#34;:&#34;Patriots&#34;,&#34;yards&#34;:1528,&#34;touchdowns&#34;:7,&#34;_links&#34;:{&#34;rushing-stats&#34;:{&#34;href&#34;:&#34;http://nflteamstatsapi-env.eba-ri96jifs.us-east-1.elasticbeanstalk.com/v1/nfl-stats/teams/rushing-stats/defense/2019&#34;}}},{&#34;name&#34;:&#34;Titans&#34;,&#34;yards&#34;:1672,&#34;touchdowns&#34;:14,&#34;_links&#34;:{&#34;rushing-stats&#34;:{&#34;href&#34;:&#34;http://nflteamstatsapi-env.eba-ri96jifs.us-east-1.elasticbeanstalk.com/v1/nfl-stats/teams/rushing-stats/defense/2019&#34;}}},{&#34;name&#34;:&#34;Raiders&#34;,&#34;yards&#34;:1570,&#34;touchdowns&#34;:15,&#34;_links&#34;:{&#34;rushing-stats&#34;:{&#34;href&#34;:&#34;http://nflteamstatsapi-env.eba-ri96jifs.us-east-1.elasticbeanstalk.com/v1/nfl-stats/teams/rushing-stats/defense/2019&#34;}}},{&#34;name&#34;:&#34;Texans&#34;,&#34;yards&#34;:1937,&#34;touchdowns&#34;:12,&#34;_links&#34;:{&#34;rushing-stats&#34;:{&#34;href&#34;:&#34;http://nflteamstatsapi-env.eba-ri96jifs.us-east-1.elasticbeanstalk.com/v1/nfl-stats/teams/rushing-stats/defense/2019&#34;}}},{&#34;name&#34;:&#34;Packers&#34;,&#34;yards&#34;:1921,&#34;touchdowns&#34;:15,&#34;_links&#34;:{&#34;rushing-stats&#34;:{&#34;href&#34;:&#34;http://nflteamstatsapi-env.eba-ri96jifs.us-east-1.elasticbeanstalk.com/v1/nfl-stats/teams/rushing-stats/defense/2019&#34;}}},{&#34;name&#34;:&#34;Broncos&#34;,&#34;yards&#34;:1783,&#34;touchdowns&#34;:9,&#34;_links&#34;:{&#34;rushing-stats&#34;:{&#34;href&#34;:&#34;http://nflteamstatsapi-env.eba-ri96jifs.us-east-1.elasticbeanstalk.com/v1/nfl-stats/teams/rushing-stats/defense/2019&#34;}}},{&#34;name&#34;:&#34;Buccaneers&#34;,&#34;yards&#34;:1181,&#34;touchdowns&#34;:11,&#34;_links&#34;:{&#34;rushing-stats&#34;:{&#34;href&#34;:&#34;http://nflteamstatsapi-env.eba-ri96jifs.us-east-1.elasticbeanstalk.com/v1/nfl-stats/teams/rushing-stats/defense/2019&#34;}}},{&#34;name&#34;:&#34;Lions&#34;,&#34;yards&#34;:1855,&#34;touchdowns&#34;:13,&#34;_links&#34;:{&#34;rushing-stats&#34;:{&#34;href&#34;:&#34;http://nflteamstatsapi-env.eba-ri96jifs.us-east-1.elasticbeanstalk.com/v1/nfl-stats/teams/rushing-stats/defense/2019&#34;}}},{&#34;name&#34;:&#34;Saints&#34;,&#34;yards&#34;:1461,&#34;touchdowns&#34;:12,&#34;_links&#34;:{&#34;rushing-stats&#34;:{&#34;href&#34;:&#34;http://nflteamstatsapi-env.eba-ri96jifs.us-east-1.elasticbeanstalk.com/v1/nfl-stats/teams/rushing-stats/defense/2019&#34;}}},{&#34;name&#34;:&#34;Rams&#34;,&#34;yards&#34;:1809,&#34;touchdowns&#34;:15,&#34;_links&#34;:{&#34;rushing-stats&#34;:{&#34;href&#34;:&#34;http://nflteamstatsapi-env.eba-ri96jifs.us-east-1.elasticbeanstalk.com/v1/nfl-stats/teams/rushing-stats/defense/2019&#34;}}},{&#34;name&#34;:&#34;Cardinals&#34;,&#34;yards&#34;:1922,&#34;touchdowns&#34;:9,&#34;_links&#34;:{&#34;rushing-stats&#34;:{&#34;href&#34;:&#34;http://nflteamstatsapi-env.eba-ri96jifs.us-east-1.elasticbeanstalk.com/v1/nfl-stats/teams/rushing-stats/defense/2019&#34;}}},{&#34;name&#34;:&#34;Bears&#34;,&#34;yards&#34;:1632,&#34;touchdowns&#34;:16,&#34;_links&#34;:{&#34;rushing-stats&#34;:{&#34;href&#34;:&#34;http://nflteamstatsapi-env.eba-ri96jifs.us-east-1.elasticbeanstalk.com/v1/nfl-stats/teams/rushing-stats/defense/2019&#34;}}},{&#34;name&#34;:&#34;Steelers&#34;,&#34;yards&#34;:1753,&#34;touchdowns&#34;:7,&#34;_links&#34;:{&#34;rushing-stats&#34;:{&#34;href&#34;:&#34;http://nflteamstatsapi-env.eba-ri96jifs.us-east-1.elasticbeanstalk.com/v1/nfl-stats/teams/rushing-stats/defense/2019&#34;}}},{&#34;name&#34;:&#34;Browns&#34;,&#34;yards&#34;:2315,&#34;touchdowns&#34;:19,&#34;_links&#34;:{&#34;rushing-stats&#34;:{&#34;href&#34;:&#34;http://nflteamstatsapi-env.eba-ri96jifs.us-east-1.elasticbeanstalk.com/v1/nfl-stats/teams/rushing-stats/defense/2019&#34;}}},{&#34;name&#34;:&#34;Jaguars&#34;,&#34;yards&#34;:2229,&#34;touchdowns&#34;:23,&#34;_links&#34;:{&#34;rushing-stats&#34;:{&#34;href&#34;:&#34;http://nflteamstatsapi-env.eba-ri96jifs.us-east-1.elasticbeanstalk.com/v1/nfl-stats/teams/rushing-stats/defense/2019&#34;}}},{&#34;name&#34;:&#34;Panthers&#34;,&#34;yards&#34;:2296,&#34;touchdowns&#34;:31,&#34;_links&#34;:{&#34;rushing-stats&#34;:{&#34;href&#34;:&#34;http://nflteamstatsapi-env.eba-ri96jifs.us-east-1.elasticbeanstalk.com/v1/nfl-stats/teams/rushing-stats/defense/2019&#34;}}},{&#34;name&#34;:&#34;Bengals&#34;,&#34;yards&#34;:2382,&#34;touchdowns&#34;:17,&#34;_links&#34;:{&#34;rushing-stats&#34;:{&#34;href&#34;:&#34;http://nflteamstatsapi-env.eba-ri96jifs.us-east-1.elasticbeanstalk.com/v1/nfl-stats/teams/rushing-stats/defense/2019&#34;}}},{&#34;name&#34;:&#34;Jets&#34;,&#34;yards&#34;:1391,&#34;touchdowns&#34;:12,&#34;_links&#34;:{&#34;rushing-stats&#34;:{&#34;href&#34;:&#34;http://nflteamstatsapi-env.eba-ri96jifs.us-east-1.elasticbeanstalk.com/v1/nfl-stats/teams/rushing-stats/defense/2019&#34;}}},{&#34;name&#34;:&#34;Chiefs&#34;,&#34;yards&#34;:2051,&#34;touchdowns&#34;:14,&#34;_links&#34;:{&#34;rushing-stats&#34;:{&#34;href&#34;:&#34;http://nflteamstatsapi-env.eba-ri96jifs.us-east-1.elasticbeanstalk.com/v1/nfl-stats/teams/rushing-stats/defense/2019&#34;}}},{&#34;name&#34;:&#34;Chargers&#34;,&#34;yards&#34;:1805,&#34;touchdowns&#34;:15,&#34;_links&#34;:{&#34;rushing-stats&#34;:{&#34;href&#34;:&#34;http://nflteamstatsapi-env.eba-ri96jifs.us-east-1.elasticbeanstalk.com/v1/nfl-stats/teams/rushing-stats/defense/2019&#34;}}},{&#34;name&#34;:&#34;Falcons&#34;,&#34;yards&#34;:1775,&#34;touchdowns&#34;:13,&#34;_links&#34;:{&#34;rushing-stats&#34;:{&#34;href&#34;:&#34;http://nflteamstatsapi-env.eba-ri96jifs.us-east-1.elasticbeanstalk.com/v1/nfl-stats/teams/rushing-stats/defense/2019&#34;}}},{&#34;name&#34;:&#34;Giants&#34;,&#34;yards&#34;:1812,&#34;touchdowns&#34;:19,&#34;_links&#34;:{&#34;rushing-stats&#34;:{&#34;href&#34;:&#34;http://nflteamstatsapi-env.eba-ri96jifs.us-east-1.elasticbeanstalk.com/v1/nfl-stats/teams/rushing-stats/defense/2019&#34;}}},{&#34;name&#34;:&#34;Redskins&#34;,&#34;yards&#34;:2339,&#34;touchdowns&#34;:14,&#34;_links&#34;:{&#34;rushing-stats&#34;:{&#34;href&#34;:&#34;http://nflteamstatsapi-env.eba-ri96jifs.us-east-1.elasticbeanstalk.com/v1/nfl-stats/teams/rushing-stats/defense/2019&#34;}}},{&#34;name&#34;:&#34;Dolphins&#34;,&#34;yards&#34;:2166,&#34;touchdowns&#34;:15,&#34;_links&#34;:{&#34;rushing-stats&#34;:{&#34;href&#34;:&#34;http://nflteamstatsapi-env.eba-ri96jifs.us-east-1.elasticbeanstalk.com/v1/nfl-stats/teams/rushing-stats/defense/2019&#34;}}}]},&#34;_links&#34;:{&#34;self&#34;:{&#34;href&#34;:&#34;http://nflteamstatsapi-env.eba-ri96jifs.us-east-1.elasticbeanstalk.com/v1/nfl-stats/teams/rushing-stats/defense/2019&#34;}}} . Build a Web Service . This code allows more control in the Backend of the API only calling it once a day. Outputs the raw JSON data for the receiving-stats of all NFL teams including touchdowns and yards. . import java.net.URI; import java.net.http.HttpClient; import java.net.http.HttpRequest; import java.net.http.HttpResponse; HttpRequest request = HttpRequest.newBuilder() .uri(URI.create(&quot;https://nfl-team-stats.p.rapidapi.com/v1/nfl-stats/teams/receiving-stats/offense/2019&quot;)) .header(&quot;X-RapidAPI-Key&quot;, &quot;ec6e646230mshf820e393587eb36p16c0b2jsn78339512865b&quot;) .header(&quot;X-RapidAPI-Host&quot;, &quot;nfl-team-stats.p.rapidapi.com&quot;) .method(&quot;GET&quot;, HttpRequest.BodyPublishers.noBody()) .build(); HttpResponse&lt;String&gt; response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString()); System.out.println(response.body()); import java.net.URI; import java.net.http.HttpClient; import java.net.http.HttpRequest; import java.net.http.HttpResponse; import java.util.Date; import java.util.HashMap; import org.json.simple.JSONObject; import org.json.simple.parser.JSONParser; import org.springframework.http.HttpStatus; import org.springframework.http.ResponseEntity; import org.springframework.web.bind.annotation.*; @RestController // annotation to create a RESTful web services @RequestMapping(&quot;/api/nfl&quot;) //prefix of API public class CovidApiController { private JSONObject body; //last run result private HttpStatus status; //last run status String last_run = null; //last run day of month // GET Covid 19 Stats @GetMapping(&quot;/daily&quot;) //added to end of prefix as endpoint public ResponseEntity&lt;JSONObject&gt; getCovid() { //calls API once a day, sets body and status properties String today = new Date().toString().substring(0,10); if (last_run == null || !today.equals(last_run)) { try { //APIs can fail (ie Internet or Service down) //RapidAPI header HttpRequest request = HttpRequest.newBuilder() .uri(URI.create(&quot;https://nfl-team-stats.p.rapidapi.com/v1/nfl-stats/teams/receiving-stats/offense/2019&quot;)) .header(&quot;X-RapidAPI-Key&quot;, &quot;ec6e646230mshf820e393587eb36p16c0b2jsn78339512865b&quot;) .header(&quot;X-RapidAPI-Host&quot;, &quot;nfl-team-stats.p.rapidapi.com&quot;) .method(&quot;GET&quot;, HttpRequest.BodyPublishers.noBody()) .build(); //RapidAPI request and response HttpResponse&lt;String&gt; response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString()); //JSONParser extracts text body and parses to JSONObject this.body = (JSONObject) new JSONParser().parse(response.body()); this.status = HttpStatus.OK; //200 success this.last_run = today; } catch (Exception e) { //capture failure info HashMap&lt;String, String&gt; status = new HashMap&lt;&gt;(); status.put(&quot;status&quot;, &quot;RapidApi failure: &quot; + e); //Setup object for error this.body = (JSONObject) status; this.status = HttpStatus.INTERNAL_SERVER_ERROR; //500 error this.last_run = null; } } //return JSONObject in RESTful style return new ResponseEntity&lt;&gt;(body, status); } } . {&#34;_embedded&#34;:{&#34;teamReceivingStatsList&#34;:[{&#34;name&#34;:&#34;Falcons&#34;,&#34;receives&#34;:459,&#34;touchdowns&#34;:29,&#34;yards&#34;:5049,&#34;_links&#34;:{&#34;receiving-stats&#34;:{&#34;href&#34;:&#34;http://nflteamstatsapi-env.eba-ri96jifs.us-east-1.elasticbeanstalk.com/v1/nfl-stats/teams/passing-stats/offense/2019&#34;}}},{&#34;name&#34;:&#34;Saints&#34;,&#34;receives&#34;:418,&#34;touchdowns&#34;:36,&#34;yards&#34;:4431,&#34;_links&#34;:{&#34;receiving-stats&#34;:{&#34;href&#34;:&#34;http://nflteamstatsapi-env.eba-ri96jifs.us-east-1.elasticbeanstalk.com/v1/nfl-stats/teams/passing-stats/offense/2019&#34;}}},{&#34;name&#34;:&#34;Rams&#34;,&#34;receives&#34;:397,&#34;touchdowns&#34;:22,&#34;yards&#34;:4669,&#34;_links&#34;:{&#34;receiving-stats&#34;:{&#34;href&#34;:&#34;http://nflteamstatsapi-env.eba-ri96jifs.us-east-1.elasticbeanstalk.com/v1/nfl-stats/teams/passing-stats/offense/2019&#34;}}},{&#34;name&#34;:&#34;Chargers&#34;,&#34;receives&#34;:394,&#34;touchdowns&#34;:24,&#34;yards&#34;:4648,&#34;_links&#34;:{&#34;receiving-stats&#34;:{&#34;href&#34;:&#34;http://nflteamstatsapi-env.eba-ri96jifs.us-east-1.elasticbeanstalk.com/v1/nfl-stats/teams/passing-stats/offense/2019&#34;}}},{&#34;name&#34;:&#34;Eagles&#34;,&#34;receives&#34;:391,&#34;touchdowns&#34;:27,&#34;yards&#34;:4063,&#34;_links&#34;:{&#34;receiving-stats&#34;:{&#34;href&#34;:&#34;http://nflteamstatsapi-env.eba-ri96jifs.us-east-1.elasticbeanstalk.com/v1/nfl-stats/teams/passing-stats/offense/2019&#34;}}},{&#34;name&#34;:&#34;Cowboys&#34;,&#34;receives&#34;:388,&#34;touchdowns&#34;:30,&#34;yards&#34;:4902,&#34;_links&#34;:{&#34;receiving-stats&#34;:{&#34;href&#34;:&#34;http://nflteamstatsapi-env.eba-ri96jifs.us-east-1.elasticbeanstalk.com/v1/nfl-stats/teams/passing-stats/offense/2019&#34;}}},{&#34;name&#34;:&#34;Panthers&#34;,&#34;receives&#34;:382,&#34;touchdowns&#34;:17,&#34;yards&#34;:4134,&#34;_links&#34;:{&#34;receiving-stats&#34;:{&#34;href&#34;:&#34;http://nflteamstatsapi-env.eba-ri96jifs.us-east-1.elasticbeanstalk.com/v1/nfl-stats/teams/passing-stats/offense/2019&#34;}}},{&#34;name&#34;:&#34;Buccaneers&#34;,&#34;receives&#34;:382,&#34;touchdowns&#34;:33,&#34;yards&#34;:5127,&#34;_links&#34;:{&#34;receiving-stats&#34;:{&#34;href&#34;:&#34;http://nflteamstatsapi-env.eba-ri96jifs.us-east-1.elasticbeanstalk.com/v1/nfl-stats/teams/passing-stats/offense/2019&#34;}}},{&#34;name&#34;:&#34;Chiefs&#34;,&#34;receives&#34;:378,&#34;touchdowns&#34;:30,&#34;yards&#34;:4690,&#34;_links&#34;:{&#34;receiving-stats&#34;:{&#34;href&#34;:&#34;http://nflteamstatsapi-env.eba-ri96jifs.us-east-1.elasticbeanstalk.com/v1/nfl-stats/teams/passing-stats/offense/2019&#34;}}},{&#34;name&#34;:&#34;Patriots&#34;,&#34;receives&#34;:378,&#34;touchdowns&#34;:25,&#34;yards&#34;:4153,&#34;_links&#34;:{&#34;receiving-stats&#34;:{&#34;href&#34;:&#34;http://nflteamstatsapi-env.eba-ri96jifs.us-east-1.elasticbeanstalk.com/v1/nfl-stats/teams/passing-stats/offense/2019&#34;}}},{&#34;name&#34;:&#34;Giants&#34;,&#34;receives&#34;:376,&#34;touchdowns&#34;:30,&#34;yards&#34;:4070,&#34;_links&#34;:{&#34;receiving-stats&#34;:{&#34;href&#34;:&#34;http://nflteamstatsapi-env.eba-ri96jifs.us-east-1.elasticbeanstalk.com/v1/nfl-stats/teams/passing-stats/offense/2019&#34;}}},{&#34;name&#34;:&#34;Bears&#34;,&#34;receives&#34;:371,&#34;touchdowns&#34;:20,&#34;yards&#34;:3573,&#34;_links&#34;:{&#34;receiving-stats&#34;:{&#34;href&#34;:&#34;http://nflteamstatsapi-env.eba-ri96jifs.us-east-1.elasticbeanstalk.com/v1/nfl-stats/teams/passing-stats/offense/2019&#34;}}},{&#34;name&#34;:&#34;Dolphins&#34;,&#34;receives&#34;:371,&#34;touchdowns&#34;:22,&#34;yards&#34;:4117,&#34;_links&#34;:{&#34;receiving-stats&#34;:{&#34;href&#34;:&#34;http://nflteamstatsapi-env.eba-ri96jifs.us-east-1.elasticbeanstalk.com/v1/nfl-stats/teams/passing-stats/offense/2019&#34;}}},{&#34;name&#34;:&#34;Raiders&#34;,&#34;receives&#34;:367,&#34;touchdowns&#34;:22,&#34;yards&#34;:4110,&#34;_links&#34;:{&#34;receiving-stats&#34;:{&#34;href&#34;:&#34;http://nflteamstatsapi-env.eba-ri96jifs.us-east-1.elasticbeanstalk.com/v1/nfl-stats/teams/passing-stats/offense/2019&#34;}}},{&#34;name&#34;:&#34;Jaguars&#34;,&#34;receives&#34;:364,&#34;touchdowns&#34;:24,&#34;yards&#34;:4023,&#34;_links&#34;:{&#34;receiving-stats&#34;:{&#34;href&#34;:&#34;http://nflteamstatsapi-env.eba-ri96jifs.us-east-1.elasticbeanstalk.com/v1/nfl-stats/teams/passing-stats/offense/2019&#34;}}},{&#34;name&#34;:&#34;Bengals&#34;,&#34;receives&#34;:356,&#34;touchdowns&#34;:18,&#34;yards&#34;:3994,&#34;_links&#34;:{&#34;receiving-stats&#34;:{&#34;href&#34;:&#34;http://nflteamstatsapi-env.eba-ri96jifs.us-east-1.elasticbeanstalk.com/v1/nfl-stats/teams/passing-stats/offense/2019&#34;}}},{&#34;name&#34;:&#34;Packers&#34;,&#34;receives&#34;:356,&#34;touchdowns&#34;:26,&#34;yards&#34;:4017,&#34;_links&#34;:{&#34;receiving-stats&#34;:{&#34;href&#34;:&#34;http://nflteamstatsapi-env.eba-ri96jifs.us-east-1.elasticbeanstalk.com/v1/nfl-stats/teams/passing-stats/offense/2019&#34;}}},{&#34;name&#34;:&#34;Texans&#34;,&#34;receives&#34;:355,&#34;touchdowns&#34;:27,&#34;yards&#34;:4083,&#34;_links&#34;:{&#34;receiving-stats&#34;:{&#34;href&#34;:&#34;http://nflteamstatsapi-env.eba-ri96jifs.us-east-1.elasticbeanstalk.com/v1/nfl-stats/teams/passing-stats/offense/2019&#34;}}},{&#34;name&#34;:&#34;Cardinals&#34;,&#34;receives&#34;:355,&#34;touchdowns&#34;:20,&#34;yards&#34;:3797,&#34;_links&#34;:{&#34;receiving-stats&#34;:{&#34;href&#34;:&#34;http://nflteamstatsapi-env.eba-ri96jifs.us-east-1.elasticbeanstalk.com/v1/nfl-stats/teams/passing-stats/offense/2019&#34;}}},{&#34;name&#34;:&#34;Lions&#34;,&#34;receives&#34;:344,&#34;touchdowns&#34;:28,&#34;yards&#34;:4187,&#34;_links&#34;:{&#34;receiving-stats&#34;:{&#34;href&#34;:&#34;http://nflteamstatsapi-env.eba-ri96jifs.us-east-1.elasticbeanstalk.com/v1/nfl-stats/teams/passing-stats/offense/2019&#34;}}},{&#34;name&#34;:&#34;Seahawks&#34;,&#34;receives&#34;:341,&#34;touchdowns&#34;:31,&#34;yards&#34;:4110,&#34;_links&#34;:{&#34;receiving-stats&#34;:{&#34;href&#34;:&#34;http://nflteamstatsapi-env.eba-ri96jifs.us-east-1.elasticbeanstalk.com/v1/nfl-stats/teams/passing-stats/offense/2019&#34;}}},{&#34;name&#34;:&#34;49ers&#34;,&#34;receives&#34;:331,&#34;touchdowns&#34;:28,&#34;yards&#34;:4029,&#34;_links&#34;:{&#34;receiving-stats&#34;:{&#34;href&#34;:&#34;http://nflteamstatsapi-env.eba-ri96jifs.us-east-1.elasticbeanstalk.com/v1/nfl-stats/teams/passing-stats/offense/2019&#34;}}},{&#34;name&#34;:&#34;Jets&#34;,&#34;receives&#34;:323,&#34;touchdowns&#34;:19,&#34;yards&#34;:3443,&#34;_links&#34;:{&#34;receiving-stats&#34;:{&#34;href&#34;:&#34;http://nflteamstatsapi-env.eba-ri96jifs.us-east-1.elasticbeanstalk.com/v1/nfl-stats/teams/passing-stats/offense/2019&#34;}}},{&#34;name&#34;:&#34;Vikings&#34;,&#34;receives&#34;:319,&#34;touchdowns&#34;:26,&#34;yards&#34;:3729,&#34;_links&#34;:{&#34;receiving-stats&#34;:{&#34;href&#34;:&#34;http://nflteamstatsapi-env.eba-ri96jifs.us-east-1.elasticbeanstalk.com/v1/nfl-stats/teams/passing-stats/offense/2019&#34;}}},{&#34;name&#34;:&#34;Browns&#34;,&#34;receives&#34;:318,&#34;touchdowns&#34;:22,&#34;yards&#34;:3847,&#34;_links&#34;:{&#34;receiving-stats&#34;:{&#34;href&#34;:&#34;http://nflteamstatsapi-env.eba-ri96jifs.us-east-1.elasticbeanstalk.com/v1/nfl-stats/teams/passing-stats/offense/2019&#34;}}},{&#34;name&#34;:&#34;Steelers&#34;,&#34;receives&#34;:315,&#34;touchdowns&#34;:18,&#34;yards&#34;:3214,&#34;_links&#34;:{&#34;receiving-stats&#34;:{&#34;href&#34;:&#34;http://nflteamstatsapi-env.eba-ri96jifs.us-east-1.elasticbeanstalk.com/v1/nfl-stats/teams/passing-stats/offense/2019&#34;}}},{&#34;name&#34;:&#34;Broncos&#34;,&#34;receives&#34;:312,&#34;touchdowns&#34;:16,&#34;yards&#34;:3401,&#34;_links&#34;:{&#34;receiving-stats&#34;:{&#34;href&#34;:&#34;http://nflteamstatsapi-env.eba-ri96jifs.us-east-1.elasticbeanstalk.com/v1/nfl-stats/teams/passing-stats/offense/2019&#34;}}},{&#34;name&#34;:&#34;Colts&#34;,&#34;receives&#34;:307,&#34;touchdowns&#34;:22,&#34;yards&#34;:3314,&#34;_links&#34;:{&#34;receiving-stats&#34;:{&#34;href&#34;:&#34;http://nflteamstatsapi-env.eba-ri96jifs.us-east-1.elasticbeanstalk.com/v1/nfl-stats/teams/passing-stats/offense/2019&#34;}}},{&#34;name&#34;:&#34;Bills&#34;,&#34;receives&#34;:299,&#34;touchdowns&#34;:21,&#34;yards&#34;:3476,&#34;_links&#34;:{&#34;receiving-stats&#34;:{&#34;href&#34;:&#34;http://nflteamstatsapi-env.eba-ri96jifs.us-east-1.elasticbeanstalk.com/v1/nfl-stats/teams/passing-stats/offense/2019&#34;}}},{&#34;name&#34;:&#34;Redskins&#34;,&#34;receives&#34;:298,&#34;touchdowns&#34;:18,&#34;yards&#34;:3205,&#34;_links&#34;:{&#34;receiving-stats&#34;:{&#34;href&#34;:&#34;http://nflteamstatsapi-env.eba-ri96jifs.us-east-1.elasticbeanstalk.com/v1/nfl-stats/teams/passing-stats/offense/2019&#34;}}},{&#34;name&#34;:&#34;Titans&#34;,&#34;receives&#34;:297,&#34;touchdowns&#34;:29,&#34;yards&#34;:3956,&#34;_links&#34;:{&#34;receiving-stats&#34;:{&#34;href&#34;:&#34;http://nflteamstatsapi-env.eba-ri96jifs.us-east-1.elasticbeanstalk.com/v1/nfl-stats/teams/passing-stats/offense/2019&#34;}}},{&#34;name&#34;:&#34;Ravens&#34;,&#34;receives&#34;:289,&#34;touchdowns&#34;:37,&#34;yards&#34;:3350,&#34;_links&#34;:{&#34;receiving-stats&#34;:{&#34;href&#34;:&#34;http://nflteamstatsapi-env.eba-ri96jifs.us-east-1.elasticbeanstalk.com/v1/nfl-stats/teams/passing-stats/offense/2019&#34;}}}]},&#34;_links&#34;:{&#34;self&#34;:{&#34;href&#34;:&#34;http://nflteamstatsapi-env.eba-ri96jifs.us-east-1.elasticbeanstalk.com/v1/nfl-stats/teams/receiving-stats/offense/2019&#34;}}} . | import org.json.simple.JSONObject; package org.json.simple does not exist .",
            "url": "https://nicm2.github.io/fastpages_nic/fastpages/2022/09/29/api.html",
            "relUrl": "/fastpages/2022/09/29/api.html",
            "date": " • Sep 29, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Images and Arrays",
            "content": "import javax.imageio.ImageIO; import java.io.File; import java.io.IOException; import java.awt.image.BufferedImage; public class ImageIOTest { public static void main( String[] args ){ BufferedImage img = null; // buffer type try { // Name of file and directories String name = &quot;MonaLisa&quot;; String in = &quot;images/&quot;; String out = &quot;images/tmp/&quot;; // Either use URL or File for reading image using ImageIO File imageFile = new File(in + name + &quot;.png&quot;); img = ImageIO.read(imageFile); // set buffer of image data // ImageIO Image write to gif in Java // Documentation https://docs.oracle.com/javase/tutorial/2d/images/index.html ImageIO.write(img, &quot;gif&quot;, new File(out + name + &quot;.gif&quot;) ); // write buffer to gif } catch (IOException e) { e.printStackTrace(); } System.out.println(&quot;Success&quot;); } } ImageIOTest.main(null); . Success . import java.awt.Color; import java.awt.image.BufferedImage; import java.awt.Image; import java.awt.Graphics2D; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import javax.imageio.stream.ImageOutputStream; import javax.imageio.stream.ImageInputStream; import javax.imageio.metadata.IIOMetadata; import javax.imageio.IIOImage; import javax.imageio.ImageIO; import javax.imageio.ImageWriteParam; import javax.imageio.ImageWriter; import javax.imageio.ImageReader; import javax.imageio.ImageTypeSpecifier; public class Pics { private final String inDir = &quot;images/&quot;; // location of images private final String outDir = &quot;images/tmp/&quot;; // location of created files private String inFile; private String resizedFile; private String asciiFile; private String grayscaleFile; private String ext; // extension of file private long bytes; private int width; private int height; // Constructor obtains attributes of picture public Pics(String name, String path, String ext) { this.ext = ext; this.inFile = this.inDir + name + &quot;.&quot; + ext; this.resizedFile = this.outDir + path + name + &quot;.&quot; + ext; this.asciiFile = this.outDir + path + name + &quot;.txt&quot;; this.grayscaleFile = this.outDir + path + name + &quot;gray.&quot; + ext; this.setStats(); } // An image contains metadata, namely size, width, and height public void setStats() { BufferedImage img; try { Path path = Paths.get(this.inFile); this.bytes = Files.size(path); img = ImageIO.read(new File(this.inFile)); this.width = img.getWidth(); this.height = img.getHeight(); } catch (IOException e) { } } // Console print of data public void printStats(String msg) { System.out.println(msg + &quot;: &quot; + this.bytes + &quot; &quot; + this.width + &quot;x&quot; + this.height + &quot; &quot; + this.inFile); } // Convert scaled image into buffered image public static BufferedImage convertToBufferedImage(Image img) { // Create a buffered image with transparency BufferedImage bi = new BufferedImage( img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB); // magic? Graphics2D graphics2D = bi.createGraphics(); graphics2D.drawImage(img, 0, 0, null); graphics2D.dispose(); return bi; } // Scale or reduce to &quot;scale&quot; percentage provided public void resize(int scale) { BufferedImage img = null; Image resizedImg = null; int width = (int) (this.width * (scale/100.0) + 0.5); int height = (int) (this.height * (scale/100.0) + 0.5); try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data // create a new BufferedImage for drawing resizedImg = img.getScaledInstance(width, height, Image.SCALE_SMOOTH); } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(resizedImg), this.ext, new File(resizedFile)); } catch (IOException e) { return; } this.inFile = this.resizedFile; // use scaled file vs original file in Class this.setStats(); } // convert every pixel to an ascii character (ratio does not seem correct) public void convertToAscii() { BufferedImage img = null; PrintWriter asciiPrt = null; FileWriter asciiWrt = null; try { File file = new File(this.asciiFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { asciiPrt = new PrintWriter(asciiWrt = new FileWriter(this.asciiFile, true)); } catch (IOException e) { System.out.println(&quot;ASCII out file create error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i &lt; img.getHeight(); i+=3) { for (int j = 0; j &lt; img.getWidth(); j++) { Color col = new Color(img.getRGB(j, i)); double pixVal = (((col.getRed() * 0.30) + (col.getBlue() * 0.59) + (col .getGreen() * 0.11))); try { asciiPrt.print(asciiChar(pixVal)); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } try { asciiPrt.println(&quot;&quot;); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } } public void grayScale() { BufferedImage image; int width; int height; try { setStats(); File input = new File(this.inFile); image = ImageIO.read(input); width = image.getWidth(); height = image.getHeight(); for(int i=0; i&lt;height; i++) { for(int j=0; j&lt;width; j++) { Color c = new Color(image.getRGB(j, i)); int red = (int)(c.getRed() * 0.299); int green = (int)(c.getGreen() * 0.587); int blue = (int)(c.getBlue() *0.114); Color newColor = new Color(red+green+blue,red+green+blue,red+green+blue); image.setRGB(j,i,newColor.getRGB()); } } File output = new File(this.grayscaleFile); ImageIO.write(image, &quot;gif&quot;, output); } catch (Exception e) {} } // conversion table, there may be better out there ie https://www.billmongan.com/Ursinus-CS173-Fall2020/Labs/ASCIIArt public String asciiChar(double g) { String str = &quot; &quot;; if (g &gt;= 240) { str = &quot; &quot;; } else if (g &gt;= 210) { str = &quot;.&quot;; } else if (g &gt;= 190) { str = &quot;*&quot;; } else if (g &gt;= 170) { str = &quot;+&quot;; } else if (g &gt;= 120) { str = &quot;^&quot;; } else if (g &gt;= 110) { str = &quot;&amp;&quot;; } else if (g &gt;= 80) { str = &quot;8&quot;; } else if (g &gt;= 60) { str = &quot;#&quot;; } else { str = &quot;@&quot;; } return str; } // tester/driver public static void main(String[] args) throws IOException { Pics monaLisa = new Pics(&quot;MonaLisa&quot;, &quot;MonaLisa/&quot;, &quot;png&quot;); monaLisa.printStats(&quot;Original&quot;); monaLisa.grayScale(); monaLisa.resize(33); monaLisa.printStats(&quot;Scaled&quot;); monaLisa.convertToAscii(); Pics pumpkin = new Pics(&quot;pumpkin&quot;, &quot;Pumpkin/&quot;, &quot;png&quot;); pumpkin.printStats(&quot;Original&quot;); pumpkin.grayScale(); pumpkin.resize(33); pumpkin.printStats(&quot;Scaled&quot;); pumpkin.convertToAscii(); Pics monkey = new Pics(&quot;monkey&quot;, &quot;Monkey/&quot;, &quot;png&quot;); monkey.printStats(&quot;Original&quot;); monkey.grayScale(); monkey.resize(33); monkey.printStats(&quot;Scaled&quot;); monkey.convertToAscii(); } } Pics.main(null); . Original: 499298 389x413 images/MonaLisa.png Scaled: 55625 128x136 images/tmp/MonaLisa/MonaLisa.png Original: 39392 302x265 images/pumpkin.png Scaled: 10497 100x87 images/tmp/Pumpkin/pumpkin.png Original: 95108 1085x814 images/monkey.png Scaled: 256684 358x269 images/tmp/Monkey/monkey.png . import java.awt.Color; import java.awt.image.BufferedImage; import java.awt.Image; import java.awt.Graphics2D; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import javax.imageio.stream.ImageOutputStream; import javax.imageio.stream.ImageInputStream; import javax.imageio.metadata.IIOMetadata; import javax.imageio.IIOImage; import javax.imageio.ImageIO; import javax.imageio.ImageWriteParam; import javax.imageio.ImageWriter; import javax.imageio.ImageReader; import javax.imageio.ImageTypeSpecifier; public class Pics { private final String inDir = &quot;images/&quot;; // location of images private final String outDir = &quot;images/tmp/&quot;; // location of created files private String inFile; private String resizedFile; private String asciiFile; private String greyFile; private String ext; // extension of file private long bytes; private int width; private int height; // Constructor obtains attributes of picture public Pics(String name, String ext) { this.ext = ext; this.inFile = this.inDir + name + &quot;.&quot; + ext; this.resizedFile = this.outDir + name + &quot;.&quot; + ext; this.asciiFile = this.outDir + name + &quot;.txt&quot;; this.greyFile = this.outDir + name + &quot;.png&quot;; this.setStats(); } // An image contains metadata, namely size, width, and height public void setStats() { BufferedImage img; try { Path path = Paths.get(this.inFile); this.bytes = Files.size(path); img = ImageIO.read(new File(this.inFile)); this.width = img.getWidth(); this.height = img.getHeight(); } catch (IOException e) { } } // Console print of data public void printStats(String msg) { System.out.println(msg + &quot;: &quot; + this.bytes + &quot; &quot; + this.width + &quot;x&quot; + this.height + &quot; &quot; + this.inFile); } // Convert scaled image into buffered image public static BufferedImage convertToBufferedImage(Image img) { // Create a buffered image with transparency BufferedImage bi = new BufferedImage( img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB); // magic? Graphics2D graphics2D = bi.createGraphics(); graphics2D.drawImage(img, 0, 0, null); graphics2D.dispose(); return bi; } // Scale or reduce to &quot;scale&quot; percentage provided public void resize(int scale) { BufferedImage img = null; Image resizedImg = null; int width = (int) (this.width * (scale/100.0) + 0.5); int height = (int) (this.height * (scale/100.0) + 0.5); try { img = ImageIO.read(new File(this.inFile)); // set buffer of image data // create a new BufferedImage for drawing resizedImg = img.getScaledInstance(width, height, Image.SCALE_SMOOTH); } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(resizedImg), this.ext, new File(resizedFile)); } catch (IOException e) { return; } this.inFile = this.resizedFile; this.setStats(); } public void convertToGreen() { BufferedImage img = null; PrintWriter asciiPrt = null; FileWriter asciiWrt = null; try { File file = new File(this.asciiFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { asciiPrt = new PrintWriter(asciiWrt = new FileWriter(this.asciiFile, true)); } catch (IOException e) { System.out.println(&quot;ASCII out file create error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color col = new Color(img.getRGB(j, i)); // double pixVal = (((col.getRed() * 0.30) + (col.getBlue() * 0.59) + (col // .getGreen() * 0.11))); int r = (int) (col.getRed() * 0); int g = (int) (col.getGreen()); int b = (int) (col.getBlue() * 0); Color greyScale = new Color( r, g, b); img.setRGB(j, i, greyScale.getRGB()); } try { asciiPrt.println(&quot;&quot;); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } //write image try{ File file = new File(this.greyFile); ImageIO.write(img, &quot;png&quot;, file); }catch(IOException e){ System.out.println(e); } } // tester/driver public static void main(String[] args) throws IOException { Pics mL = new Pics(&quot;MonaLisa&quot;, &quot;png&quot;); mL.convertToGreen(); } } Pics.main(null); .",
            "url": "https://nicm2.github.io/fastpages_nic/fastpages/2022/09/28/images.html",
            "relUrl": "/fastpages/2022/09/28/images.html",
            "date": " • Sep 28, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Fibonacci Algorithm",
            "content": "/* * Creator: Nighthawk Coding Society * Mini Lab Name: Fibonacci sequence, featuring a Stream Algorithm * */ import java.util.ArrayList; import java.util.HashMap; import java.util.stream.Stream; /* Objective will require changing to abstract class with one or more abstract methods below */ public class Fibo { String name; // name or title of method int size; // nth sequence int hashID; // counter for hashIDs in hash map ArrayList&lt;Long&gt; list; // captures current Fibonacci sequence HashMap&lt;Integer, Object&gt; hash; // captures each sequence leading to final result /* Zero parameter constructor uses Telescoping technique to allow setting of the required value nth @param: none */ public Fibo() { this(20); // telescope to avoid code duplication, using default as 20 } /* Construct the nth fibonacci number @param: nth number, the value is constrained to 92 because of overflow in a long */ public Fibo(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); //initialize fibonacci and time mvc this.init(); } /* This Method should be &quot;abstract&quot; Leave method as protected, as it is only authorized to extender of the class Make new class that extends and defines init() Inside references within this class would change from this to super Repeat process using for, while, recursion */ protected void init() { this.name = &quot;Stream&quot;; Stream.iterate(new long[]{0, 1}, f -&gt; new long[]{f[1], f[0] + f[1]}) .limit(this.size) .forEach(f -&gt; this.setData(f[0]) ); } /* Number is added to fibonacci sequence, current state of &quot;list&quot; is added to hash for hashID &quot;num&quot; */ public void setData(long num) { list.add(num); hash.put(this.hashID++, list.clone()); } /* Custom Getter to return last element in fibonacci sequence */ public long getNth() { return list.get(this.size - 1); } /* Custom Getter to return last fibonacci sequence in HashMap */ public Object getNthSeq(int i) { return hash.get(i); } /* Console/Terminal supported print method */ public void print() { System.out.println(&quot;Init method = &quot; + this.name); System.out.println(&quot;fibonacci Number &quot; + this.size + &quot; = &quot; + this.getNth()); System.out.println(&quot;fibonacci List = &quot; + this.list); System.out.println(&quot;fibonacci Hashmap = &quot; + this.hash); for (int i=0 ; i&lt;this.size; i++ ) { System.out.println(&quot;fibonacci Sequence &quot; + (i+1) + &quot; = &quot; + this.getNthSeq(i)); } } /* Tester class method. If this becomes abstract you will not be able to test it directly ... Change this method to call &quot;main&quot; class of each of the extended classes */ static public void main(String[] args) { Fibo fib = new Fibo(); fib.print(); } } Fibo.main(null); . Init method = Stream fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] . For Loop . public class FiboForLoop extends Fibo { public FiboForLoop() { this(10); } public FiboForLoop(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); //initialize fibonacci and time mvc this.init(); } protected void init(){ this.name = &quot;For Loop&quot;; this.setData(0); this.setData(1); for(int i = 2; i &lt;= this.size; ++i){ this.setData(this.list.get(i-2)+this.list.get(i-1)); } } static public void main(String[] args) { FiboForLoop fib = new FiboForLoop(); fib.print(); } } FiboForLoop.main(null); . Init method = For Loop fibonacci Number 10 = 34 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181], 20=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765], 21=[0], 22=[0, 1], 23=[0, 1, 1], 24=[0, 1, 1, 2], 25=[0, 1, 1, 2, 3], 26=[0, 1, 1, 2, 3, 5], 27=[0, 1, 1, 2, 3, 5, 8], 28=[0, 1, 1, 2, 3, 5, 8, 13], 29=[0, 1, 1, 2, 3, 5, 8, 13, 21], 30=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 31=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] . While Loop . public class FiboWhileLoop extends Fibo { public FiboWhileLoop() { this(10); } public FiboWhileLoop(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); //initialize fibonacci and time mvc this.init(); } protected void init(){ this.name = &quot;While Loop&quot;; this.setData(0); this.setData(1); int i = 2; while(i &lt;= this.size){ this.setData(this.list.get(i-2)+this.list.get(i-1)); i++; } } static public void main(String[] args) { FiboWhileLoop fib = new FiboWhileLoop(); fib.print(); } } FiboWhileLoop.main(null); . Recursion . public class FiboRecursiveLoop extends Fibo { public FiboRecursiveLoop() { this(10); } public FiboRecursiveLoop(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); //initialize fibonacci and time mvc this.init(); } protected void init(){ this.name = &quot;Recursion&quot;; for(int n = 0; n &lt; this.size; n++){ this.setData(this.calc(n)); } } public int calc(int n) { if (n &lt; 2) { return n; } return this.calc(n-2) + this.calc(n-1); } static public void main(String[] args) { FiboRecursiveLoop fib = new FiboRecursiveLoop(); fib.print(); } } FiboRecursiveLoop.main(null); . Init method = Recursion fibonacci Number 10 = 34 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181], 20=[0], 21=[0, 1], 22=[0, 1, 1], 23=[0, 1, 1, 2], 24=[0, 1, 1, 2, 3], 25=[0, 1, 1, 2, 3, 5], 26=[0, 1, 1, 2, 3, 5, 8], 27=[0, 1, 1, 2, 3, 5, 8, 13], 28=[0, 1, 1, 2, 3, 5, 8, 13, 21], 29=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] . College Board Standards . Skill 1.B:Determine code that would be used to complete code segments (ie For, While, Recursion) . For the For-Loop and While-Loop implementation/method for fibo I used an initial line to iterate through the sequence but the foor loop uses a counter while the while is automated. For the recursive method, I used a line that called the function repeadetly until it stops at the right number. ### Skill 4.C: Determine if two or more code segments yield equivalent results (be sure to Discuss how you know results are the same) | All 4 of the code segments implemented in my fibonacci algorithm all yield the same printed results. I know the results are the same because I can compare the results from each method. ### Skill 5.A: Describe the behavior of a given segment of program code (describe the difference in recursion versus for &amp; while loops, perhaps add timing to determine speed) | The for-loop, while-loop, and recursion methods all take around the same amount of time around 90,000 nanoseconds to execute. However, the Stream method takes a lot more time at 7,545,500 nanoseconds to execute. I used System.nanoTime() in order to determine the time. | .",
            "url": "https://nicm2.github.io/fastpages_nic/fastpages/2022/09/25/fibonacci.html",
            "relUrl": "/fastpages/2022/09/25/fibonacci.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "JavaScript and HTML",
            "content": "console.log(&quot;Nicolas&#39; JavaScript practice&quot;); function logItType(output) { console.log(typeof output, &quot;;&quot;, output); } // define a function to hold data for a Person function Person(name, peergrade, role) { this.name = name; this.peergrade = peergrade; this.role = role; } // define a JSON conversion &quot;method&quot; associated with Person Person.prototype.toJSON = function() { const obj = {name: this.name, peergrade: this.peergrade, role: this.role}; const json = JSON.stringify(obj); // json/string is useful when passing data on internet return json; } // make a new Person and assign to variable teacher var teacher = new Person(&quot;Mr M&quot;, &quot;3.0/3.0&quot;, &quot;Teacher&quot;); // object type is easy to work with in JavaScript // define a student Array of Person(s) var students = [ new Person(&quot;Nicolas&quot;, &quot;2.7/3.0&quot;, &quot;Scrum Master&quot;), new Person(&quot;Andrew&quot;, &quot;2.7+/3.0&quot;, &quot;Backend Dev&quot;), new Person(&quot;Bailey&quot;, &quot;2.7+/3.0&quot;, &quot;Backend Dev&quot;), new Person(&quot;Rohan&quot;, &quot;2.7/3.0&quot;, &quot;Frontend Dev&quot;), ]; // define a classroom and build Classroom objects and json function Classroom(teacher, students){ // 1 teacher, many student this.teacher = teacher; this.classroom = [teacher]; // add each Student to Classroom this.students = students; this.students.forEach(student =&gt; { this.classroom.push(student); }); // build json/string format of Classroom this.json = []; this.classroom.forEach(person =&gt; this.json.push(person.toJSON())); } // make a CompSci classroom from formerly defined teacher and students teamScore = new Classroom(teacher, students); // define an HTML conversion &quot;method&quot; associated with Classroom Classroom.prototype._toHtml = function() { // HTML Style is build using inline structure var style = ( &quot;display:inline-block;&quot; + &quot;border: 1px solid coral;&quot; + &quot;box-shadow: 1em 0.6em 0.6em skyblue;&quot; ); // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // Heading for Array Columns body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Peer Grade&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Role&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array, iterate through each row of teamScore.classroom for (var row in teamScore.classroom) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + teamScore.classroom[row].name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + teamScore.classroom[row].peergrade + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + teamScore.classroom[row].role + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } // Build and HTML fragment of div, table, table body return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; // IJavaScript HTML processor receive parameter of defined HTML fragment $$.html(teamScore._toHtml()); . Nicolas&#39; JavaScript practice . NamePeer GradeRole . Mr M | 3.0/3.0 | Teacher | Nicolas | 2.7/3.0 | Scrum Master | Andrew | 2.7+/3.0 | Backend Dev | Bailey | 2.7+/3.0 | Backend Dev | Rohan | 2.7/3.0 | Frontend Dev | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . .",
            "url": "https://nicm2.github.io/fastpages_nic/fastpages/2022/09/24/javascript.html",
            "relUrl": "/fastpages/2022/09/24/javascript.html",
            "date": " • Sep 24, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Iteration with 2D Arrays",
            "content": "/* * Creator: Nighthawk Coding Society * Mini Lab Name: Hello Series,featuring Monkey Jumpers */ /** * Class for Monkeys: a 2D array of Monkeys * As well as method to print the Poem */ class MonkeyLoop { //The area between class definition and the 1st method is where we keep data for object in Java String [][] monkeys; //2D Array: AP CSA Unit 8: 2D array of strings //2D array is like a grid [x][y] // or like a spreadsheet [row][column] /** * Constructor initializes a 2D array of Monkeys */ public MonkeyLoop() { //Storing Data in 2D arrays monkeys = new String[][]{ //2D array above is just a name, &quot;new&quot; makes a container (&quot;object&quot;) //Monkey 0 { &quot;ʕง ͠° ͟ل͜ ͡°)ʔ&quot;, //[0][0] eyes &quot; _⏄_/ &quot;,//[0][1] chin &quot; --0-- &quot;, //[0][2] body &quot; ⎛ ⎞ &quot; //[0][3] legs }, //Monkey 1 { &quot; ʕ༼ ◕_◕ ༽ʔ&quot;, //[1][0] &quot; _⎏_/ &quot;, &quot; ++1++ &quot;, &quot; ⌋ ⌊ &quot; }, //Monkey 2 { &quot; ʕ(▀ ⍡ ▀)ʔ&quot;, //[2][0] &quot; _⎐_/ &quot;, &quot; &lt;-2-&gt; &quot;, &quot; 〈 〉 &quot; }, //Monkey 3 { &quot;ʕ ͡° ͜ʖ ° ͡ʔ&quot;, //[3][0] &quot; _⍾_/ &quot;, &quot; ==3== &quot;, &quot; _/ _ &quot; }, //Monkey 4 { &quot; (◕‿◕✿) &quot;, //[4][0] &quot; _⍾_/ &quot;, //[4][1] &quot; ==4== &quot;, //[4][2] &quot; _/ _ &quot; //[4][3] }, }; } /** * Loop and print monkeys in array * ... repeat until you reach zero ... */ public void printPoem() { //begin the poem System.out.println(); System.out.println(&quot;Monkey Jumpers Poem in Java Loopy&quot;); // monkeys (non-primitive) defined in constructor knows its length int monkeyCount = monkeys.length; for (int i = monkeyCount; i &gt;= 1; i--) //loops through 2D array length backwards { //this print statement shows current count of Monkeys // concatenation (+) of the loop variable and string to form a countdown message System.out.println(i + &quot; little monkeys jumping on the bed...&quot;); //how many separate parts are there in a monkey monkey? for (int row = 0; row &lt; monkeyCount; row++) { //cycles through &quot;cells&quot; of 2d array /*cycles through columns to print each monkey part by part, will eventually print entire column*/ for (int col = 0; col &lt; monkeys[row].length; col++) { // prints specific part of the monkey from the column System.out.print(monkeys[row][col] + &quot; &quot;); //this is new line between separate parts System.out.println(); } //this new line gives separation between stanza of poem System.out.println(); } //countdown for poem, decrementing monkeyCount variable by 1 monkeyCount -= 1; } //out of all the loops, prints finishing messages System.out.println(&quot;No more monkeys jumping on the bed&quot;); System.out.println(&quot;0000000000000000000000000000000000&quot;); System.out.println(&quot; THE END &quot;); } /** * A Java Driver/Test method that is the entry point for execution */ public static void main(String[] args) { new MonkeyLoop().printPoem(); //a new monkey list and output in one step } } MonkeyLoop.main(null); . Monkey Jumpers Poem in Java Loopy 5 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ ʕ༼ ◕_◕ ༽ʔ _⎏_/ ++1++ ⌋ ⌊ ʕ(▀ ⍡ ▀)ʔ _⎐_/ &lt;-2-&gt; 〈 〉 ʕ ͡° ͜ʖ ° ͡ʔ _⍾_/ ==3== _/ _ (◕‿◕✿) _⍾_/ ==4== _/ _ 4 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ ʕ༼ ◕_◕ ༽ʔ _⎏_/ ++1++ ⌋ ⌊ ʕ(▀ ⍡ ▀)ʔ _⎐_/ &lt;-2-&gt; 〈 〉 ʕ ͡° ͜ʖ ° ͡ʔ _⍾_/ ==3== _/ _ 3 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ ʕ༼ ◕_◕ ༽ʔ _⎏_/ ++1++ ⌋ ⌊ ʕ(▀ ⍡ ▀)ʔ _⎐_/ &lt;-2-&gt; 〈 〉 2 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ ʕ༼ ◕_◕ ༽ʔ _⎏_/ ++1++ ⌋ ⌊ 1 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ No more monkeys jumping on the bed 0000000000000000000000000000000000 THE END . Learning Inquiries . Is this program in more of an Imperative Programming Style or OOP style? Explain. Observe variable assignments. | Is each Monkey an object? | . | . This 2D array program is definatley more of an Imperative Programming Style rather than Object-Oriented Programming style. This is because the program just prints out a 2D array of monkeys which aren&#39;t object but just a string of ASCII characters. There is no class for monkey that has attributes and methods so the program dosen&#39;t use OOP and can be replicated in other languages . Study loops and zero based counting Study two-dimensional (2D) array references | Explain different way you can access a 2D array | . | . 2D arrays can be refrenced through the row and collumn (2 dimensions). . class MyMonkeyLoop { //The area between class definition and the 1st method is where we keep data for object in Java String [][] monkeys; //2D Array: AP CSA Unit 8: 2D array of strings //2D array is like a grid [x][y] // or like a spreadsheet [row][column] /** * Constructor initializes a 2D array of Monkeys */ public MyMonkeyLoop() { //Storing Data in 2D arrays monkeys = new String[][]{ //2D array above is just a name, &quot;new&quot; makes a container (&quot;object&quot;) //Monkey 0 { &quot;ʕง ͠° ͟ل͜ ͡°)ʔ&quot;, //[0][0] eyes &quot; _⏄_/ &quot;, //[0][1] chin &quot; --0-- &quot;, //[0][2] body &quot; ⎛ ⎞ &quot; //[0][3] legs }, //Monkey 1 { &quot;ʕ༼ ◕_◕ ༽ʔ&quot;, //[1][0] &quot; _⎏_/ &quot;, &quot; ++1++ &quot;, &quot; ⌋ ⌊ &quot; }, //Monkey 2 { &quot;ʕ(▀ ⍡ ▀)ʔ&quot;, //[2][0] &quot; _⎐_/ &quot;, &quot; &lt;-2-&gt; &quot;, &quot; 〈 〉 &quot; }, //Monkey 3 { &quot;ʕ ͡° ͜ʖ ° ͡ʔ&quot;, //[3][0] &quot; _⍾_/ &quot;, &quot; ==3== &quot;, &quot; _/ _ &quot; }, //Monkey 4 { &quot;(◕‿◕✿)&quot;, //[4][0] &quot; _⍾_/ &quot;, //[4][1] &quot; ==4== &quot;, //[4][2] &quot; _/ _ &quot; //[4][3] }, }; } /** * Loop and print monkeys in array * ... repeat until you reach zero ... */ public void printPoem() { //begin the poem System.out.println(); System.out.println(&quot;Monkey Jumpers Poem in Java Loopy&quot;); // monkeys (non-primitive) defined in constructor knows its length int monkeyCount = monkeys.length; for (int i = monkeyCount; i &gt;= 1; i--) { //loops through 2D array length backwards //this print statement shows current count of Monkeys // concatenation (+) of the loop variable and string to form a countdown message System.out.println(i + &quot; little monkeys jumping on the bed...&quot;); for (int r=0; r&lt;4; r++) { for (int m=0; m&lt;i; m++) { System.out.print(monkeys[m][r] + &quot; &quot;); } System.out.println(); } //countdown for poem, decrementing monkeyCount variable by 1 System.out.println(); monkeyCount -= 1; } //out of all the loops, prints finishing messages System.out.println(&quot;No more monkeys jumping on the bed&quot;); System.out.println(&quot;0000000000000000000000000000000000&quot;); System.out.println(&quot; THE END &quot;); } /** * A Java Driver/Test method that is the entry point for execution */ public static void main(String[] args) { new MyMonkeyLoop().printPoem(); //a new monkey list and output in one step } } MyMonkeyLoop.main(null); . Monkey Jumpers Poem in Java Loopy 5 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ ʕ ͡° ͜ʖ ° ͡ʔ (◕‿◕✿) _⏄_/ _⎏_/ _⎐_/ _⍾_/ _⍾_/ --0-- ++1++ &lt;-2-&gt; ==3== ==4== ⎛ ⎞ ⌋ ⌊ 〈 〉 _/ _ _/ _ 4 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ ʕ ͡° ͜ʖ ° ͡ʔ _⏄_/ _⎏_/ _⎐_/ _⍾_/ --0-- ++1++ &lt;-2-&gt; ==3== ⎛ ⎞ ⌋ ⌊ 〈 〉 _/ _ 3 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ _⏄_/ _⎏_/ _⎐_/ --0-- ++1++ &lt;-2-&gt; ⎛ ⎞ ⌋ ⌊ 〈 〉 2 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ _⏄_/ _⎏_/ --0-- ++1++ ⎛ ⎞ ⌋ ⌊ 1 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ No more monkeys jumping on the bed 0000000000000000000000000000000000 THE END .",
            "url": "https://nicm2.github.io/fastpages_nic/fastpages/2022/09/16/mokeys.html",
            "relUrl": "/fastpages/2022/09/16/mokeys.html",
            "date": " • Sep 16, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "AP Exam FRQ 1 Practice",
            "content": "Question 1: . The APCalendar class contains methods used to calculate information about a calendar. You will write two methods of the class . public class APCalendar { /** Returns true if year is a leap year and false otherwise. */ private static boolean isLeapYear(int year) { /* implementation not shown */ } /** Returns the number of leap years between year1 and year2, inclusive. * Precondition: 0 &lt;= year1 &lt;= year2 */ public static int numberOfLeapYears(int year1, int year2) { /* to be implemented in part (a) */ } /** Returns the value representing the day of the week for the first day of year, * where 0 denotes Sunday, 1 denotes Monday, ..., and 6 denotes Saturday. */ private static int firstDayOfYear(int year) { /* implementation not shown */ } /** Returns n, where month, day, and year specify the nth day of the year. * Returns 1 for January 1 (month = 1, day = 1) of any year. * Precondition: The date represented by month, day, year is a valid date. */ private static int dayOfYear(int month, int day, int year) { /* implementation not shown */ } /** Returns the value representing the day of the week for the given date * (month, day, year), where 0 denotes Sunday, 1 denotes Monday, ..., * and 6 denotes Saturday. * Precondition: The date represented by month, day, year is a valid date. */ public static int dayOfWeek(int month, int day, int year) { /* to be implemented in part (b) */ } // There may be instance variables, constructors, and other methods not shown. } . (a) Write the static method numberOfLeapYears, which returns the number of leap years between year1 and year2, inclusive. In order to calculate this value, a helper method is provided for you. . isLeapYear(year) returns true if year is a leap year and false otherwise. . Complete method numberOfLeapYears below. You must use isLeapYear appropriately to receive full credit. . /** Returns the number of leap years between year1 and year2, inclusive. * Precondition: 0 &lt;= year1 &lt;= year2 */ public static int numberOfLeapYears(int year1, int year2) . Q1 a) Answer: . Given Info: the parameters year1 and year 2, the isLeapYear(year) method . Return Type: return type of numberOfLeapYears is int and I have to calculate the number of leap years between 2 years and return it. . public static int numberOfLeapYears(int year1, int year2) { int count = 0; for (int y = year1; y &lt;= year2; y++) { if (isLeapYear(y)){ count++; } } return count; } . import java.util.Calendar; import java.util.GregorianCalendar; public class APCalendar { /** Returns the number of leap years between year1 and year2, inclusive. * Precondition: 0 &lt;= year1 &lt;= year2 */ public static int numberOfLeapYears(int year1, int year2) { int count = 0; for (int y = year1; y &lt;= year2; y++) { if (isLeapYear(y)){ count++; } } return count; } /** Returns true if year is a leap year and false otherwise. */ private static boolean isLeapYear(int year) { return new GregorianCalendar().isLeapYear(year); } public static void main(String[] args) { int answer = APCalendar.numberOfLeapYears(2000, 2050); System.out.println(&quot;Your answer should be 13: &quot; + answer); } } . FRQ 1 Question b) . Write the static method dayOfWeek, which returns the integer value representing the day of the week for the given date (month, day, year), where 0 denotes Sunday, 1 denotes Monday, ..., and 6 denotes Saturday. For example, 2019 began on a Tuesday, and January 5 is the fifth day of 2019. As a result, January 5, 2019, fell on a Saturday, and the method call dayOfWeek(1, 5, 2019) returns 6. As another example, January 10 is the tenth day of 2019. As a result, January 10, 2019, fell on a Thursday, and the method call dayOfWeek(1, 10, 2019) returns 4. In order to calculate this value, two helper methods are provided for you . firstDayOfYear(year) returns the integer value representing the day of the week for the first day of year, where 0 denotes Sunday, 1 denotes Monday, …, and 6 denotes Saturday. For example, since 2019 began on a Tuesday, firstDayOfYear(2019) returns 2. . dayOfYear(month, day, year) returns n, where month, day, and year specify the nth day of the year. For the first day of the year, January 1 (month = 1, day = 1), the value 1 is returned. This method accounts for whether year is a leap year. For example, dayOfYear(3, 1, 2017) returns 60, since 2017 is not a leap year, while dayOfYear(3, 1, 2016) returns 61, since 2016 is a leap year. . Complete method dayOfWeek below. You must use firstDayOfYear and dayOfYear appropriately to receive full credit. . /** Returns the value representing the day of the week for the given date * (month, day, year), where 0 denotes Sunday, 1 denotes Monday, ..., * and 6 denotes Saturday. * Precondition: The date represented by month, day, year is a valid date. */ public static int dayOfWeek(int month, int day, int year) . Q1 Answer b) . public static int dayOfWeek(int month, int day, int year){ public static int dayOfWeek(int month, int day, int year) { firstDay = firstDayOfYear(year); // store the day of the week of the first day dayAfter = dayOfYear(month, day, year); // store the number of days since new year (inclusive) return (firstDay + dayAfter - 1) % 7; // adds the day of the week to the days since new year, but minus 1 because the dayAfterNew includes the first day. then, mod 7 } . import java.util.Calendar; import java.util.GregorianCalendar; public class APCalendar { /** Returns the value representing the day of the week for the given date * (month, day, year), where 0 denotes Sunday, 1 denotes Monday, ..., * and 6 denotes Saturday. * Precondition: The date represented by month, day, year is a valid date. */ public static int dayOfWeek(int month, int day, int year){ public static int dayOfWeek(int month, int day, int year) { firstDay = firstDayOfYear(year); // store the day of the week of the first day dayAfter = dayOfYear(month, day, year); // store the number of days since new year (inclusive) return (firstDay + dayAfter - 1) % 7; // adds the day of the week to the days since new year, but minus 1 because the dayAfterNew includes the first day. then, mod 7 } public static void main(String[] args) { int answer = APCalendar.dayOfWeek(1, 8, 2019); System.out.println(&quot;Your answer should be 2: &quot; + answer); } /** Returns the value representing the day of the week for the first day of year, * where 0 denotes Sunday, 1 denotes Monday, ..., and 6 denotes Saturday. */ private static int firstDayOfYear(int year) { GregorianCalendar gc = new GregorianCalendar(year, Calendar.JANUARY, 1); return gc.get(Calendar.DAY_OF_WEEK) - 1; } /** Returns n, where month, day, and year specify the nth day of the year. * Returns 1 for January 1 (month = 1, day = 1) of any year. * Precondition: The date represented by month, day, year is a valid date. */ private static int dayOfYear(int month, int day, int year) { GregorianCalendar gc = new GregorianCalendar(year, month - 1, day); return gc.get(Calendar.DAY_OF_YEAR); } } .",
            "url": "https://nicm2.github.io/fastpages_nic/fastpages/2022/09/15/frq-1.html",
            "relUrl": "/fastpages/2022/09/15/frq-1.html",
            "date": " • Sep 15, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Week 3 Ticket",
            "content": "Hacks . Lesson on ifs and expressions | Deployment on AWS | Focus / Habits | . Review Ticket Issue . Issue | . Posts . Deployed Java Project on AWS | Lesson on ifs and expressions | Focus / Habits Blog | . Java Project . https://nicolasproject.tk/ .",
            "url": "https://nicm2.github.io/fastpages_nic/markdown/2022/09/12/week3-ticket.html",
            "relUrl": "/markdown/2022/09/12/week3-ticket.html",
            "date": " • Sep 12, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Goals and Habits",
            "content": "Nick’s Goals and Habits . Goals and Focusses for the Future . Get involved in a club this school year (preferably one related to my intrests) | Take online courses to find my intrests that I want to pursue in the future | Get an internship or take summer courses next summer | Stop procrastinating and get my work done quickly | Be happy and not feel stressed by school and work | Prioritize mental health | Get a consistent schedule and stick to it | Go to the gym more often which will help me and my mental health | . Physcology and the Good Life Takeaways . A large percentage of college students feel stressed out by school work | Teachers don’t try to make you feel depressed | It’s important to prioritize mental health | You will be more productive if you feel happy | Anxiety and stress is important to managage | The video was very enlightening and helped me better understand how I can overcome struggles with stress and achieve happiness. Laurie gave me some good ideas to help relieve stress by spending time with other people and maintaining social connections. Overall, I feel like I need to prioritize my hapinness in order to pursue a more successful future. Mental health and motivitation is just as important as how much work I can get done. I need to focus on myself. | . Gratitude . I am grateful for my parents who support and encourage me in everything that I do. My loving parents push me to be the best and I wouldn’t want anyone else on my sideline. My parents are also very kind and hard-working. I look up to them and hope to make them proud. | .",
            "url": "https://nicm2.github.io/fastpages_nic/markdown/2022/09/11/week3-focus-and-goals.html",
            "relUrl": "/markdown/2022/09/11/week3-focus-and-goals.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Boolean Expressions and If Statement Lesson",
            "content": "If Statement . An if statement executes a block of code when a specified boolean expression is evaluated as true. . boolean condition = true; if (condition == true) { System.out.println(&quot;This code executes&quot;); } // Prints: This code executes if (condition == false) { System.out.println(&quot;This code does not execute&quot;); } // There is no output for the above statement . This code executes . If Else Statement . The else statement executes a block of code when the condition inside the if statement is false. The else statement is always the last condition. . boolean condition = false; if (condition){ System.out.println(&quot;condition is true&quot;); } else{ System.out.println(&quot;condition is not true&quot;); } // Prints: condition1 is not true . condition is not true . Else If Statement . Else-if statements can be chained together to check multiple conditions. Once a condition is true, a code block will be executed and the conditional statement will be exited. . int classGrade = 76; char grade; if (classGrade &gt;= 90) { grade = &#39;A&#39;; } else if (classGrade &gt;= 80) { grade = &#39;B&#39;; } else if (classGrade &gt;= 70) { grade = &#39;C&#39;; } else if (classGrade &gt;= 60) { grade = &#39;D&#39;; } else { grade = &#39;F&#39;; } System.out.println(grade); . C . Switch Cases . Similar to else if statements but switch cases can have a number of possible execution paths. The value of the expression is compared with the values of each case, iff there is a match, the associated block of code is executed. . int month = 9; String monthName; switch (month) { case 1: monthName = &quot;January&quot;; break; case 2: monthName = &quot;February&quot;; break; case 3: monthName = &quot;March&quot;; break; case 4: monthName = &quot;April&quot;; break; case 5: monthName = &quot;May&quot;; break; case 6: monthName = &quot;June&quot;; break; case 7: monthName = &quot;July&quot;; break; case 8: monthName = &quot;August&quot;; break; case 9: monthName = &quot;September&quot;; break; case 10: monthName = &quot;October&quot;; break; case 11: monthName = &quot;November&quot;; break; case 12: monthName = &quot;December&quot;; break; default: monthName = &quot;Invalid month&quot;; break; } System.out.println(monthName); . September . De Morgan&#39;s Law . Laws that define how we can negate an AND statement and how we can negate an OR statement. De Morgan’s Laws simply state: !(a &amp;&amp; b) is equivalent to !a || !b and !(a || b) is equivalent to !a &amp;&amp; !b. not (a and b) is the same as (not a) or (not b) and not (a or b) is the same as (not a) and (not b) . public class DeMorgansAndTest { public static void main(String[] args) { int x = 13; int y = 151; System.out.println(!(x&lt;15 &amp;&amp; y &gt; 150)); System.out.println(!(x&lt;15) || !(y &gt; 150)); } } DeMorgansAndTest.main(null) . false false . public class DeMorgansAndTest { public static void main(String[] args) { int x = 28; int y = 100; System.out.println(!(x&lt;21 || y &gt; 130)); System.out.println(!(x&lt;21) &amp;&amp; !(y &gt; 130)); } } DeMorgansAndTest.main(null) . true true .",
            "url": "https://nicm2.github.io/fastpages_nic/jupyter/2022/09/11/if-lesson.html",
            "relUrl": "/jupyter/2022/09/11/if-lesson.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Deployed Java Project",
            "content": "Deployed Java Project . Link to project website (deployed) - https://nicolasproject.tk/ | .",
            "url": "https://nicm2.github.io/fastpages_nic/markdown/2022/09/10/deployment.html",
            "relUrl": "/markdown/2022/09/10/deployment.html",
            "date": " • Sep 10, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "Week 2 Ticket",
            "content": "Hacks . Java Menu Created with colors &amp; input | Code.org up to Lesson 15 | Code.org java reflection | . Review Ticket Issue . Issue | . Posts . Java Menu Notebook | Code.org Reflection | . Code.org Progress . .",
            "url": "https://nicm2.github.io/fastpages_nic/markdown/2022/09/06/week2-ticket.html",
            "relUrl": "/markdown/2022/09/06/week2-ticket.html",
            "date": " • Sep 6, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "Java Menu (NFL Draft)",
            "content": "import java.net.http.*; import java.util.Scanner; import java.util.Scanner; import java.lang.Math; public class Menu { public final String DEFAULT = &quot; u001B[0m&quot;; public final String[][] COLORS = { {&quot;Default&quot;,DEFAULT}, {&quot;Red&quot;, &quot; u001B[31m&quot;}, {&quot;Green&quot;, &quot; u001B[32m&quot;}, {&quot;Yellow&quot;, &quot; u001B[33m&quot;}, {&quot;Blue&quot;, &quot; u001B[34m&quot;}, {&quot;Purple&quot;, &quot; u001B[35m&quot;}, {&quot;Cyan&quot;, &quot; u001B[36m&quot;}, {&quot;White&quot;, &quot; u001B[37m&quot;}, {&quot;Reset&quot;,&quot; u001B[0m&quot;}, {&quot;Liverpool&quot;,&quot; 033[1;91m&quot;}, {&quot;Tottenham&quot;,&quot; 033[0;107m&quot;}, {&quot;Real&quot;,&quot; 033[0;95m&quot;}, {&quot;Bayern&quot;,&quot; 033[0;101m&quot;}, {&quot;Dortmund&quot;, &quot; 033[0;93m&quot;}, }; public final int NAME = 0; public final int ANSI = 1; public Menu() { Scanner sc = new Scanner(System.in); this.print(); boolean quit = false; while (!quit) { try { int choice = sc.nextInt(); System.out.print(&quot;&quot; + choice + &quot;: &quot;); quit = this.action(choice); } catch (Exception e) { sc.nextLine(); System.out.println(e + &quot;: Not a number, try again.&quot;); } } sc.close(); } private void print() { System.out.println(&quot;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt; n&quot;); System.out.println(&quot;NFL Draft Picks&quot;); System.out.println(&quot;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt; n&quot;); System.out.println(&quot;1 - Top Running Backs&quot;); System.out.println(&quot;2 - Top Wide Recievers&quot;); System.out.println(&quot;3 - Top Tide Ends&quot;); System.out.println(&quot;4 - Top Quarterbacks&quot;); System.out.println(&quot;5 - Top Defenses&quot;); System.out.println(&quot;0 - Quit&quot;); System.out.println(&quot;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt; n&quot;); } private boolean action(int selection) { boolean quit = false; switch (selection) { case 0: System.out.print(&quot;Exiting Program&quot;); quit = true; break; case 1: System.out.println(COLORS[10][ANSI] + &quot;Top Running Backs&quot; + COLORS[8][ANSI]); System.out.println(COLORS[1][ANSI] + &quot; t J. Taylor&quot; + COLORS[8][ANSI]); System.out.println(COLORS[1][ANSI] + &quot; t C. McCaffrey&quot; + COLORS[8][ANSI]); System.out.println(COLORS[1][ANSI] + &quot; t A. Ekeler&quot; + COLORS[8][ANSI]); System.out.println(COLORS[1][ANSI] + &quot; t D. Henry&quot; + COLORS[8][ANSI]); System.out.println(COLORS[1][ANSI] + &quot; t D. Cook&quot; + COLORS[8][ANSI]); break; case 2: System.out.println(COLORS[2][ANSI] + &quot;Top Wide Recievers&quot; + COLORS[8][ANSI]); System.out.println(COLORS[3][ANSI] + &quot; t J. Jefferson&quot; + COLORS[8][ANSI]); System.out.println(COLORS[3][ANSI] + &quot; t C. Kupp&quot; + COLORS[8][ANSI]); System.out.println(COLORS[3][ANSI] + &quot; t J. Chase&quot; + COLORS[8][ANSI]); System.out.println(COLORS[3][ANSI] + &quot; t S. Diggs&quot; + COLORS[8][ANSI]); System.out.println(COLORS[3][ANSI] + &quot; t D. Adams&quot; + COLORS[8][ANSI]); break; case 3: System.out.println(COLORS[4][ANSI] + &quot;Top Tide Ends&quot; + COLORS[8][ANSI]); System.out.println(COLORS[5][ANSI] + &quot; t M. Andrews&quot; + COLORS[8][ANSI]); System.out.println(COLORS[5][ANSI] + &quot; t K. Pitts&quot; + COLORS[8][ANSI]); System.out.println(COLORS[5][ANSI] + &quot; t G. Kittle&quot; + COLORS[8][ANSI]); System.out.println(COLORS[5][ANSI] + &quot; t D. Waller&quot; + COLORS[8][ANSI]); System.out.println(COLORS[5][ANSI] + &quot; t T. Kelce&quot; + COLORS[8][ANSI]); break; case 4: System.out.println(COLORS[6][ANSI] + &quot;Top Quarterbacks&quot; + COLORS[8][ANSI]); System.out.println(COLORS[7][ANSI] + &quot; t J. Allen&quot; + COLORS[8][ANSI]); System.out.println(COLORS[7][ANSI] + &quot; t J. Herbert&quot; + COLORS[8][ANSI]); System.out.println(COLORS[7][ANSI] + &quot; t L. Jackson&quot; + COLORS[8][ANSI]); System.out.println(COLORS[7][ANSI] + &quot; t P. Mahomes&quot; + COLORS[8][ANSI]); System.out.println(COLORS[7][ANSI] + &quot; t J. Hurts&quot; + COLORS[8][ANSI]); break; case 5: System.out.println(COLORS[8][ANSI] + &quot; t Top Defenses&quot; + COLORS[8][ANSI]); System.out.println(COLORS[9][ANSI] + &quot; t Bufallo Bills&quot; + COLORS[8][ANSI]); System.out.println(COLORS[9][ANSI] + &quot; t Dallas Cowboys&quot; + COLORS[8][ANSI]); System.out.println(COLORS[9][ANSI] + &quot; t Tampa Bay Bucaneers&quot; + COLORS[8][ANSI]); System.out.println(COLORS[9][ANSI] + &quot; t San Francisco 49ers&quot; + COLORS[8][ANSI]); break; default: System.out.print(&quot;Unexpected choice, try again.&quot;); } System.out.println(DEFAULT); return quit; } static public void main(String[] args) { new Menu(); } } Menu.main(null); . &lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt; NFL Draft Picks &lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt; 1 - Top Running Backs 2 - Top Wide Recievers 3 - Top Tide Ends 4 - Top Quarterbacks 5 - Top Defenses 0 - Quit &lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt; 3: Top Tide Ends M. Andrews K. Pitts G. Kittle D. Waller T. Kelce 2: Top Wide Recievers J. Jefferson C. Kupp J. Chase S. Diggs D. Adams 0: Exiting Program .",
            "url": "https://nicm2.github.io/fastpages_nic/jupyter/2022/09/06/menu.html",
            "relUrl": "/jupyter/2022/09/06/menu.html",
            "date": " • Sep 6, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "Code.org Learning",
            "content": "Classes . Java classes are the basic building block, like a template for objects of the class. A class is defined in its own .java file, and the name of the file has to match with the class name. . Class Instances . Class instances are objects of a class. To instance a class as an object, first type the class name, then the object name, equals new class();. . Calling an Object . You can call an object to perform a specific funciton. To do so, first write the object instance name, a period, and then the method called. . Extending (Class Hierarchy) . Extends in java “extends” a class. The class created is inherited from another class, but more methods can be written in addition to the methods already in the original class. A subclass is the class that inherits, while the superclass is the class being inherited from. .",
            "url": "https://nicm2.github.io/fastpages_nic/jupyter/2022/09/04/codeorg.html",
            "relUrl": "/jupyter/2022/09/04/codeorg.html",
            "date": " • Sep 4, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "Panel Reflection",
            "content": "Through this panel I learned a lot about a variety of individuals and their experiences with CSA/CSP and how it carries over into further education and the real world. The main takeaways from the talk was how all the members found their passion in the field of computer science and focused on that. Even if CS is not your favorite, it is important for a lot of fields and can provide a helpful structure for other areas like aerospace and mechanical engineering. There are a lot of different roles that you can specialize in which benefit from a knowledge of CS. I can relate this to myself because personally, I am not specifically sure if I want to be a Computer Science major or engineer, but a solid background in coding and computer science will benefit me and a variety of fields. Another important message I received was to focus on your own path and not to be discouraged by others and their success. Sometimes I get caught up in comparing myself with others and get discouraged when others are more advanced than me. Work on yourself! It’s more important to have fun with it, so you can feel motivated to work and challenge yourself. By doing so, you won’t feel the need to cut corners or check boxes and actually try and learn. CSA and CSP also help develop team skills that are important for college and the world and can help you with internship and job opportunities that will help you pursue a successful career and future. For me personally, my skills that I’ve learned from CSP and other resources have helped me be successful in my job at CodeNinjas. Web development and CS is so important and useful in a variety of jobs. Overall, this panel has helped me understand other people’s experiences and reflect on how I want to shape my future in the field of CS. Finally, I learned that clubs and extracurriculars, work experience, and internships can set you apart from the rest. At the end of the day, most colleges cs is the same and your GPAs is probably similar to everyone else, but building connections can help you stand out and be successful. .",
            "url": "https://nicm2.github.io/fastpages_nic/2022/08/29/panel-reflection.html",
            "relUrl": "/2022/08/29/panel-reflection.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "Weekly Schedule",
            "content": "Nick’s Weekly Schedule to help with organization . Day Activities Homework Time . Monday | none | AP Physics Canvas, AP Calc Canvas, APEL Canvas, start on CSA Blog | Homework (4:30-6:00, 7:00-10:00) | . Tuesday | Soccer Practice | AP Physics Canvas, AP Calc Canvas, APEL Canvas, start on CSA Blog | Homework (4:30-5:30), Practice (6-7:30), Homework (9:00-10:00) | . Wednesday | none | AP Physics Canvas, AP Calc Canvas, APEL Canvas, start on CSA Blog | Homework (4:30-6:00, 7:00-10:00) | . Thursday | Soccer Practice | AP Physics Canvas, AP Calc Canvas, APEL Canvas, start on CSA Blog | Homework (4:30-5:30), Practice (6-7:30), Homework (9:00-10:00) | . Friday | Football Game | AP Physics Canvas, AP Calc Canvas, APEL Canvas, start on CSA Blog | Homework (4:30-6:00, 7:00-10:00) | . Weekend | Soccer Game | minimal homework / studying | Homework/Studying (2:00-4:00), free-time (rest of the weekend) | .",
            "url": "https://nicm2.github.io/fastpages_nic/markdown/2022/08/28/weekly-schedule.html",
            "relUrl": "/markdown/2022/08/28/weekly-schedule.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "College Board Notes",
            "content": "Topic 1.1 Why Java . System.out.print and system.out.println display information on the computer monitor | System.out.println moves the cursor to a new line after the information has been displayed while System.out print does not | A string literal is an exact sequence of characters enclosed in double quotes | 3 Error Types: | Syntax/Compiler Error | Exception (ex: divide by 0) | Logic Error (ex: - instead of + when finding the sum) | . public class HelloWorld { public static void main(String[] args) { System.out.print(&quot;AP &quot;); System.out.print(&quot;CS &quot;); System.out.print(&quot;A &quot;); System.out.println(&quot;Rocks!&quot;); System.out.println(&quot;Hello World&quot;); } } . Topic 1.2 Variables and Data Types . A type is a set of values (a domain) and a set of operations on them | Data types can be categorized as either primitive or reference | The primitive data types used in this course define the set of operations for numbers and Boolean values | Boolean: T or F, Int: whole numbers, Double: floarting-point numbers | The three primitive data types used in this course are int, double, and Boolean | Each variable has associated memory that is used to hold its value | The memory associated with a variable of a primitve type holds an actual primitve value | When a variable is declared final, its value cannot be changed once it is intialized | . public class main { public static void main(String[] args){ Integer intVariable = 1995; Double doubleVariable = 1.62; Boolean booleanVariable = true; Character charVariable = &#39;A&#39;; System.out.println(intvariable); System.out.println(doublevariable); System.out.println(booleanvariable); System.out.println(stringvariable); } } .",
            "url": "https://nicm2.github.io/fastpages_nic/jupyter/2022/08/27/collegeboard.html",
            "relUrl": "/jupyter/2022/08/27/collegeboard.html",
            "date": " • Aug 27, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "Jupyter Notebook for Bash",
            "content": "Python Checks . python --version python2 --version . Python 3.9.12 Python 2.7.18 . Conda Checks . echo Conda Check # test for a kernel installation test=&quot;jupyter&quot; # keyword check=`conda list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . Conda Check jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 . Jupyter Checks . jupyter --version jupyter kernelspec list . Selected Jupyter core packages... IPython : 8.2.0 ipykernel : 6.9.1 ipywidgets : 7.6.5 jupyter_client : 6.1.12 jupyter_core : 4.9.2 jupyter_server : 1.13.5 jupyterlab : 3.3.2 nbclient : 0.5.13 nbconvert : 6.4.4 nbformat : 5.3.0 notebook : 6.4.8 qtconsole : 5.3.0 traitlets : 5.1.1 Available kernels: bash /home/nmounier/.local/share/jupyter/kernels/bash java /home/nmounier/.local/share/jupyter/kernels/java javascript /home/nmounier/.local/share/jupyter/kernels/javascript python3 /home/nmounier/anaconda3/share/jupyter/kernels/python3 . Kernel Checks . test=&quot;python3&quot; # keyword check=`jupyter kernelspec list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . python3 /home/nmounier/anaconda3/share/jupyter/kernels/python3 .",
            "url": "https://nicm2.github.io/fastpages_nic/jupyter/2022/08/26/bash.html",
            "relUrl": "/jupyter/2022/08/26/bash.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "Primitives and Data Types for Java",
            "content": "Data Types . Primitives . A primitive type is a predefined by the language and is named by a reserved keyword. Primitve values do not share state with other primitive values. There are eight primitive data types in Java: . byte: data type of an 8-bit signed two&#39;s complement integer | short: data type of a 16-bit signed two&#39;s complement integer | int: integer or whole number value | long: data type of a 64-bit two&#39;s complement integer | float: data type of fractional or decimal numbers (32 bits) | double: data type of fractional or decimal numbers (64 bits) | boolean: data type that stores either true or false | char: a unicode character | . byte a = 91; short b = 823; int c = 18913; long d = 89245621; double f = 7.9123431893; boolean g = true; char h = &#39;n&#39;; . Wrapper Classes . Wrapper classes allow the user to use primitve data types (ex: int, double) as objects and methods . Byte wraps for byte | Short wraps for short | Integer wraps for int | Long wraps for long | Float wraps for float | Double wraps for double | Boolean wraps for boolean | Character wraps for char | . To make a wrapper object, you use the wrappper class insetead of the primitive type . Integer myInt = 4; Double myDouble = 4.79; Character myChar = &#39;C&#39;; System.out.println(myInt); System.out.println(myDouble); System.out.println(myChar); . 4 4.79 C . Strings are also wrapper classes as they are a sequence or array of characters .",
            "url": "https://nicm2.github.io/fastpages_nic/jupyter/2022/08/25/primitives.html",
            "relUrl": "/jupyter/2022/08/25/primitives.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "Apel Notes",
            "content": "Terms to Know - Rhetorical Devices . Nicolas Mounier . Vocabulary Term Definitions Examples Typical Rhetorical Effects . Diction . High/Formal . Middle/Moderate . Low/informal . Colloquial . Abstract . Concrete . Monosyllabic . Polysyllabic . Connotation . | The use of vocabulary and specific words to establish a voice and writing style. . Diction that uses professional, formal language that follows grammar rules. . Diction that is neutral, neither formal nor informal, often seen in newspapers. . Diction that uses casual language often in dialogue between characters. . Diction that is highly informal and may reflect regional expressions. . Words or phrases that don’t appeal to the audience’s sensations. . Words or phrases that appeal to the audience’s sensations. . Diction that uses one word with a single syllable. . Diction that uses words with multiple syllables. . The implicit suggestion of words and phrases. . | The patient has undergone acute trauma to his left deltoid. . Please withdraw yourself from the complex machinery. . Get out of the car. . What’s up bud! How you doing? . My best friend is wicked smart! . The painting was beautiful. . The gentle gust of wind blew past my face. . The cat was in a hat. . Delighted children. . The women had a heart of an angel. . | Establishes the voice and style of a text while evoking specific emotions from the audience. . To provide a sophisticated and serious tone that reflects the purpose of the text. . Provides relatability to the audience while presenting a normal tone. . To provide a conversational and lighter tone to the writing piece. . To provide a conversational and casual tone while reflecting culture and expressions of an area. . To express a vague topic or idea that is difficult for the reader to fully grasp. . To resonate with the audience and provoke a sensory response from the audience. . To express a sense of simplicity, urgency, or create rhythm . To express a sense of complexity and intellect, while being more descriptive . To express a straight-forward and implied meaning . | . Syntax . Simple . Compound . Complex . Compound-complex . Declarative . Parallel construction . | The arrangement of words to create structured sentences. . A syntactical order made up of a subject + verb + object/complement. . A syntactical order made up of two simple syntax (clauses) combined by a conjunction and comma or semicolon only. . A syntactical order made up of multiple clauses, an independent clause, conjunction, and dependent clauses . A syntactical order made up of at least two independent clauses and at least one dependent clause. . A statement of information, fact, or explanation. . (parallelism) The use of a grammatical pattern multiple times within a sentence. . | He went to the store. . Bob drove his car. . Bob walked to work, but he had a car. . Since my popsicles were melting, I put them in the freezer. . Since my popsicles were too warm, I cooled them in the freezer. . America gained their independence in 1776. . My brother not only likes to play video games, but he also likes to sleep. . | Set of rules to structure sentences and express ideas in unique ways. . Provides a simple way for the writer to convey a simple statement. . Provides writing and text a faster pace by combining ideas. . Create texts that provide vivid details and emotions to the reader. . Creates complex sentences with more complicated details. . To provide information and data to an audience in the form of a statement. . Allows writers to create a connection between ideas and establish a relationship between them. . | . Tone . What kind of adjectives describe tone? . What creates tone? . | The author’s attitude towards the subject conveyed by diction and syntax. . Descriptive and powerful adjectives that help express the author’s feelings effectively describe tone . Tone is created by the author’s use of viewpoint, diction, and syntax. . | Formal: . To whom it may concern . Studies show many people enjoy roller coasters . Informal: . Dear Grandpa . You like rollercoasters, right? . | Tone invokes a feeling or emotion that shows evidence of the author’s attitude towards the topic to help develop and further emphasize the main ideas of a story. | . The Appeals . Logos . Ethos . Pathos . | Methods of a good argument, used to persuade. . An appeal to logic and reasoning using facts, statistics, and rationale . An appeal to the credibility and ethics of the speaker, using accomplishments or expertise. . An appeal to emotions and feelings achieved by using descriptive language or narrations. . | Studies show that 40% of driving accidents are due to underage drinking . I’m LeBron James and I can teach you the basics of basketball. . You would make this world a better, happier place by adopting this starving and lonely puppy. . | Used to appeal and persuade to the audience through different methods and create a convincing argument . To support an argument and persuade the audience through logic. . To support an argument and persuade the audience by creating credibility. . To support an argument and persuade the audience by evoking an emotional response. . | . Rhetorical Situation . Exigence . Audience . Speaker . Occasion . Purpose and Message . | A circumstance where someone uses communication to shift someone else’s perspective. . The origin of a rhetorical situation, something that motives a rhetor to argue. . The people/person who listen to the argument. Who the author is speaking to. . The one who conveys the argument or statement to the audience. . An event or time period that motivates the speaker’s argument or statement . The speaker’s desired outcome of explaining their argument. . | No honey! I did not cheat on you. . We should have stricter gun laws in the US. . Fortnite’s target audience is young adults and teenagers . The president gave a speech about World War 3 . Martin Luther King’s “I Have a Dream Speech” was a result of the injustices against African Americans in the 1960s . To help inform teenagers about the dangers of underage drinking and driving. . | Used to change the perspective of the audience. . To explain and develop reasoning behind an author’s desire to write . Affects the tone and decision-making behind how the author writes. . Affects the reason and purpose behind writing and spreading ideas. . Changes the author’s tone and purpose behind writing. . Often used to inform, persuade, or entertain. Changes the tone of the text to provide a desired outcome to the audience. . | . Claim | The main argument that the speaker works to prove and convey | The death penalty should be reinstated | To establish a centralized idea directed towards convincing an audience. | . Evidence | Sources, facts, and information that is used to support an argument | According to the study, the death penalty deters crime by 50% | To provide and support an argument while persuading the audience. | . Rhetorical and Literary Strategies . Allusion . Rhetorical Questions . Pronoun Usage . Selection of Detail . Juxtaposition . Use of Absolutes (all, none, etc.) . Point of View . | (Devices) Words or phrases used to send a message to the audience and persuade/provoke a response. . A reference to something without directly saying it. An indirect or casual reference. . A question that’s purpose is to make a statement rather than be answered. Not taking it literally. . The usage of pronouns in replace of previously mentioned nouns . Details, including vocabulary, events, or events the author uses to convey a narrative or POV . Strategy consisting of placing two or more things together to highlight their differences. . The usage of absolute terms, terms that aren’t bound by limitations (fixed). . The perspective of the speaker that determines how a story is told. . | Cheesecake is my Achilles heel. . How could you be so stupid?! . He was the only one who scored a goal. . Everyone thought the boy was non-intellectual, but he got a perfect score on his SAT . Beggars can’t be choosers. . We’ve all had rough days. . The boy stopped playing basketball after getting teased in middle school. . | To evoke an emotional response and connection with the audience and persuade. . Used to enhance a text or piece by providing elaborated and hidden meaning. . Used not to question, but to persuade and apply an effect on the audience. . Used to enhance and develop ethos by drawing attention to a persona. . To establish a specific impression or impact on the reader by emphasizing specific ideas. . To encourage the audience to understand a connection between two things. . To convey a fixed value that helps the audience understand and develop a perception . Used to express specific feelings, thoughts, or experiences that the audience can resonate and understand. . | .",
            "url": "https://nicm2.github.io/fastpages_nic/2022/08/25/apel-notes.html",
            "relUrl": "/2022/08/25/apel-notes.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "Python Notebook",
            "content": "msg = &quot;Welcome to Nick&#39;s Jupyter Notebook in VSCODE&quot; print(msg) . Welcome to Nick&#39;s Jupyter Notebook in VSCODE .",
            "url": "https://nicm2.github.io/fastpages_nic/jupyter/2022/08/24/python.html",
            "relUrl": "/jupyter/2022/08/24/python.html",
            "date": " • Aug 24, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Test hi .",
            "url": "https://nicm2.github.io/fastpages_nic/markdown/2022/08/21/first-markdown-post.html",
            "relUrl": "/markdown/2022/08/21/first-markdown-post.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://nicm2.github.io/fastpages_nic/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post27": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://nicm2.github.io/fastpages_nic/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://nicm2.github.io/fastpages_nic/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "NFL Teams Stats",
          "content": "Team Touchdowns Yards .",
          "url": "https://nicm2.github.io/fastpages_nic/nflteams",
          "relUrl": "/nflteams",
          "date": ""
      }
      
  

  

  
      ,"page4": {
          "title": "PBL",
          "content": "PBL Content . Java Menu | .",
          "url": "https://nicm2.github.io/fastpages_nic/pbl/",
          "relUrl": "/pbl/",
          "date": ""
      }
      
  

  
  

  

  
  

  

  
  

  
  

  

  
  

  
      ,"page13": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://nicm2.github.io/fastpages_nic/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}